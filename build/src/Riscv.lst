GAS LISTING /tmp/ccMC4ZM5.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB44:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   2:src/Riscv.cpp **** #include "../h/cconsole.hpp"
   3:src/Riscv.cpp **** #include "../h/MemAllocator.hpp"
   4:src/Riscv.cpp **** #include "../h/print.hpp"
   5:src/Riscv.cpp **** #include "../h/semaphore.hpp"
   6:src/Riscv.cpp **** #include "../h/sleepList.hpp"
   7:src/Riscv.cpp **** #include "../lib/hw.h"
   8:src/Riscv.cpp **** #include "../h/tcb.hpp"
   9:src/Riscv.cpp **** 
  10:src/Riscv.cpp **** 
  11:src/Riscv.cpp **** void Riscv::popSppSpie()
  12:src/Riscv.cpp **** {
  12              		.loc 1 12 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 39 is_stmt 0
  22              	#APP
  23              	# 13 "src/Riscv.cpp" 1
  14              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 30 is_stmt 0
  28              	# 14 "src/Riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE44:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
GAS LISTING /tmp/ccMC4ZM5.s 			page 2


  45 0000 0A756E65 		.string	"\nunexpected trap cause: "
  45      78706563 
  45      74656420 
  45      74726170 
  45      20636175 
  46 0019 00000000 		.align	3
  46      000000
  47              	.LC1:
  48 0020 0A00     		.string	"\n"
  49              		.text
  50              		.align	2
  51              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  53              	_ZN5Riscv20handleSupervisorTrapEv:
  54              	.LFB45:
  16:src/Riscv.cpp **** 
  17:src/Riscv.cpp **** extern "C" void Riscv::handleSupervisorTrap()
  18:src/Riscv.cpp **** {
  55              		.loc 1 18 1 is_stmt 1
  56              		.cfi_startproc
  57 0020 130101F7 		addi	sp,sp,-144
  58              		.cfi_def_cfa_offset 144
  59 0024 23341108 		sd	ra,136(sp)
  60 0028 23308108 		sd	s0,128(sp)
  61 002c 233C9106 		sd	s1,120(sp)
  62              		.cfi_offset 1, -8
  63              		.cfi_offset 8, -16
  64              		.cfi_offset 9, -24
  65 0030 13040109 		addi	s0,sp,144
  66              		.cfi_def_cfa 8, 0
  19:src/Riscv.cpp ****     //prvo citamo scause registar da bi privatili samo ecall (korisnicki ili sistemski)
  20:src/Riscv.cpp ****     uint64 scauseReg = r_scause();
  67              		.loc 1 20 5
  68              	.LBB74:
  69              	.LBB75:
  70              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** #ifndef RISCV_HPP
   2:src/../h/Riscv.hpp **** #define RISCV_HPP
   3:src/../h/Riscv.hpp **** 
   4:src/../h/Riscv.hpp **** //adresu ove funkcije treba proslediti registru stvec da bi pri pozivu ecall-a pozivao supervisorTr
   5:src/../h/Riscv.hpp **** //extern "C" void supervisorTrap();
   6:src/../h/Riscv.hpp **** #include"../lib/hw.h"
   7:src/../h/Riscv.hpp **** 
   8:src/../h/Riscv.hpp **** class Riscv
   9:src/../h/Riscv.hpp **** {
  10:src/../h/Riscv.hpp **** public:
  11:src/../h/Riscv.hpp ****     //pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  12:src/../h/Riscv.hpp ****     static void popSppSpie();
  13:src/../h/Riscv.hpp **** 
  14:src/../h/Riscv.hpp ****     static void initRiscv()
  15:src/../h/Riscv.hpp ****     {
  16:src/../h/Riscv.hpp ****         __asm__ volatile("csrw stvec, %[vector]" : : [vector] "r" (&supervisorTrap));
  17:src/../h/Riscv.hpp ****     }
  18:src/../h/Riscv.hpp **** 
  19:src/../h/Riscv.hpp ****     // read register scause
  20:src/../h/Riscv.hpp ****     static uint64 r_scause();
  21:src/../h/Riscv.hpp **** 
  22:src/../h/Riscv.hpp ****     // write register scause
GAS LISTING /tmp/ccMC4ZM5.s 			page 3


  23:src/../h/Riscv.hpp ****     static void w_scause(uint64 scause);
  24:src/../h/Riscv.hpp **** 
  25:src/../h/Riscv.hpp ****     // read register sepc
  26:src/../h/Riscv.hpp ****     static uint64 r_sepc();
  27:src/../h/Riscv.hpp **** 
  28:src/../h/Riscv.hpp ****     // write register sepc
  29:src/../h/Riscv.hpp ****     static void w_sepc(uint64 sepc);
  30:src/../h/Riscv.hpp **** 
  31:src/../h/Riscv.hpp ****     // read register stvec
  32:src/../h/Riscv.hpp ****     static uint64 r_stvec();
  33:src/../h/Riscv.hpp **** 
  34:src/../h/Riscv.hpp ****     // write register stvec
  35:src/../h/Riscv.hpp ****     static void w_stvec(uint64 stvec);
  36:src/../h/Riscv.hpp **** 
  37:src/../h/Riscv.hpp ****     // read register stval
  38:src/../h/Riscv.hpp ****     static uint64 r_stval();
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp ****     // write register stval
  41:src/../h/Riscv.hpp ****     static void w_stval(uint64 stval);
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     enum BitMaskSip
  44:src/../h/Riscv.hpp ****     {
  45:src/../h/Riscv.hpp ****         SIP_SSIE = (1 << 1),
  46:src/../h/Riscv.hpp ****         SIP_STIE = (1 << 5),
  47:src/../h/Riscv.hpp ****         SIP_SEIE = (1 << 9),
  48:src/../h/Riscv.hpp ****     };
  49:src/../h/Riscv.hpp **** 
  50:src/../h/Riscv.hpp ****     // mask set register sip
  51:src/../h/Riscv.hpp ****     static void ms_sip(uint64 mask);
  52:src/../h/Riscv.hpp **** 
  53:src/../h/Riscv.hpp ****     // mask clear register sip
  54:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  55:src/../h/Riscv.hpp **** 
  56:src/../h/Riscv.hpp ****     // read register sip
  57:src/../h/Riscv.hpp ****     static uint64 r_sip();
  58:src/../h/Riscv.hpp **** 
  59:src/../h/Riscv.hpp ****     // write register sip
  60:src/../h/Riscv.hpp ****     static void w_sip(uint64 sip);
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  63:src/../h/Riscv.hpp ****     {
  64:src/../h/Riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  65:src/../h/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  66:src/../h/Riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  67:src/../h/Riscv.hpp ****     };
  68:src/../h/Riscv.hpp **** 
  69:src/../h/Riscv.hpp ****     // mask set register sstatus
  70:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  71:src/../h/Riscv.hpp **** 
  72:src/../h/Riscv.hpp ****     // mask clear register sstatus
  73:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  74:src/../h/Riscv.hpp **** 
  75:src/../h/Riscv.hpp ****     // read register sstatus
  76:src/../h/Riscv.hpp ****     static uint64 r_sstatus();
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp ****     // write register sstatus
  79:src/../h/Riscv.hpp ****     static void w_sstatus(uint64 sstatus);
GAS LISTING /tmp/ccMC4ZM5.s 			page 4


  80:src/../h/Riscv.hpp **** 
  81:src/../h/Riscv.hpp **** 
  82:src/../h/Riscv.hpp ****     static void supervisorTrap();//ovo ce procesor pozivati kada se pojavi zahtev za prekidom
  83:src/../h/Riscv.hpp **** private:
  84:src/../h/Riscv.hpp ****     static void handleSupervisorTrap();
  85:src/../h/Riscv.hpp **** 
  86:src/../h/Riscv.hpp **** };
  87:src/../h/Riscv.hpp **** 
  88:src/../h/Riscv.hpp **** 
  89:src/../h/Riscv.hpp **** inline uint64 Riscv::r_scause()
  90:src/../h/Riscv.hpp **** {
  91:src/../h/Riscv.hpp ****     uint64 volatile scause;
  71              		.loc 2 91 5
  92:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  72              		.loc 2 92 5
  73              		.loc 2 92 72 is_stmt 0
  74              	#APP
  75              	# 92 "src/../h/Riscv.hpp" 1
  93              	    return scause;
  76              		csrr a5, scause
  77              	# 0 "" 2
  78              	#NO_APP
  79 0038 2334F4FA 		sd	a5,-88(s0)
  80              		.loc 2 93 5 is_stmt 1
  81              		.loc 2 93 12 is_stmt 0
  82 003c 833484FA 		ld	s1,-88(s0)
  83              	.LVL0:
  84              	.LBE75:
  85              	.LBE74:
  21:src/Riscv.cpp ****     if(scauseReg==0x8000000000000001UL){//
  86              		.loc 1 21 5 is_stmt 1
  87              	.LBB76:
  88 0040 9307F0FF 		li	a5,-1
  89 0044 9397F703 		slli	a5,a5,63
  90 0048 93871700 		addi	a5,a5,1
  91 004c 6384F40C 		beq	s1,a5,.L35
  92              	.LBE76:
  22:src/Riscv.cpp ****         //interrupt: yes; cause code: supervisor software interrupt (timer)
  23:src/Riscv.cpp ****         //obrada tajmera
  24:src/Riscv.cpp ****         //registar koji cuva adresu iz prekidne rutine sepc
  25:src/Riscv.cpp **** 
  26:src/Riscv.cpp ****         uint64 volatile sepc = r_sepc();
  27:src/Riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  28:src/Riscv.cpp ****         mc_sip(SIP_SSIE);
  29:src/Riscv.cpp ****         //za threadsleep lupiti takt
  30:src/Riscv.cpp ****         sleepList::clock();
  31:src/Riscv.cpp ****         sleepList::cleanFinished();
  32:src/Riscv.cpp ****         TCB::timeSliceCounter++;
  33:src/Riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
  34:src/Riscv.cpp ****         {
  35:src/Riscv.cpp ****             TCB::dispatch();
  36:src/Riscv.cpp ****         }
  37:src/Riscv.cpp ****         w_sstatus(sstatus);
  38:src/Riscv.cpp ****         w_sepc(sepc);
  39:src/Riscv.cpp **** 
  40:src/Riscv.cpp ****     }
  41:src/Riscv.cpp ****     else if(scauseReg==0x8000000000000009UL){
GAS LISTING /tmp/ccMC4ZM5.s 			page 5


  93              		.loc 1 41 10
  94              	.LBB314:
  95              	.LBB77:
  96 0050 9307F0FF 		li	a5,-1
  97 0054 9397F703 		slli	a5,a5,63
  98 0058 93879700 		addi	a5,a5,9
  99 005c 638CF412 		beq	s1,a5,.L36
 100              	.LBE77:
 101              	.LBE314:
  42:src/Riscv.cpp ****         uint64 volatile sepc = r_sepc();
  43:src/Riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  44:src/Riscv.cpp ****         //prekid od tastature
  45:src/Riscv.cpp ****         if(plic_claim() == CONSOLE_IRQ) {
  46:src/Riscv.cpp ****             while (*(char*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT) {
  47:src/Riscv.cpp ****                 Cconsole::putChIn(*(char *) CONSOLE_RX_DATA);
  48:src/Riscv.cpp ****             }
  49:src/Riscv.cpp ****             plic_complete(CONSOLE_IRQ);
  50:src/Riscv.cpp ****         }
  51:src/Riscv.cpp ****         //za sada koristimo iz date biblioteke
  52:src/Riscv.cpp ****         //console_handler();
  53:src/Riscv.cpp ****         w_sepc(sepc);
  54:src/Riscv.cpp ****         w_sstatus(sstatus);
  55:src/Riscv.cpp ****     }
  56:src/Riscv.cpp ****     else if(scauseReg == 0x08 || scauseReg == 0x09)
 102              		.loc 1 56 10
 103              	.LBB315:
 104              	.LBB284:
 105              	.LBB78:
 106              		.loc 1 56 31 is_stmt 0
 107 0060 938784FF 		addi	a5,s1,-8
 108              		.loc 1 56 10
 109 0064 13071000 		li	a4,1
 110 0068 6362F73A 		bgtu	a5,a4,.L11
 111              	.LBB79:
  57:src/Riscv.cpp ****     {
  58:src/Riscv.cpp ****         //sepc i sstatus citamo stare sepc uvecavamo da po povratku iz prekida ne bi ponovo izvrsav
  59:src/Riscv.cpp **** 
  60:src/Riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 112              		.loc 1 60 9 is_stmt 1
 113              	.LBB80:
 114              	.LBB81:
  94:src/../h/Riscv.hpp **** }
  95:src/../h/Riscv.hpp **** 
  96:src/../h/Riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  97:src/../h/Riscv.hpp **** {
  98:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
  99:src/../h/Riscv.hpp **** }
 100:src/../h/Riscv.hpp **** 
 101:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sepc()
 102:src/../h/Riscv.hpp **** {
 103:src/../h/Riscv.hpp ****     uint64 volatile sepc;
 115              		.loc 2 103 5
 104:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 116              		.loc 2 104 5
 117              		.loc 2 104 64 is_stmt 0
 118              	#APP
 119              	# 104 "src/../h/Riscv.hpp" 1
GAS LISTING /tmp/ccMC4ZM5.s 			page 6


 105              	    return sepc;
 120              		csrr a5, sepc
 121              	# 0 "" 2
 122              	#NO_APP
 123 0070 233CF4FC 		sd	a5,-40(s0)
 124              		.loc 2 105 5 is_stmt 1
 125              		.loc 2 105 12 is_stmt 0
 126 0074 833784FD 		ld	a5,-40(s0)
 127              	.LBE81:
 128              	.LBE80:
 129              		.loc 1 60 41
 130 0078 93874700 		addi	a5,a5,4
 131              		.loc 1 60 43
 132 007c 233CF4F8 		sd	a5,-104(s0)
  61:src/Riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 133              		.loc 1 61 9 is_stmt 1
 134              	.LBB82:
 135              	.LBB83:
 106:src/../h/Riscv.hpp **** }
 107:src/../h/Riscv.hpp **** 
 108:src/../h/Riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 109:src/../h/Riscv.hpp **** {
 110:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 111:src/../h/Riscv.hpp **** }
 112:src/../h/Riscv.hpp **** 
 113:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stvec()
 114:src/../h/Riscv.hpp **** {
 115:src/../h/Riscv.hpp ****     uint64 volatile stvec;
 116:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 117:src/../h/Riscv.hpp ****     return stvec;
 118:src/../h/Riscv.hpp **** }
 119:src/../h/Riscv.hpp **** 
 120:src/../h/Riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 121:src/../h/Riscv.hpp **** {
 122:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 123:src/../h/Riscv.hpp **** }
 124:src/../h/Riscv.hpp **** 
 125:src/../h/Riscv.hpp **** inline uint64 Riscv::r_stval()
 126:src/../h/Riscv.hpp **** {
 127:src/../h/Riscv.hpp ****     uint64 volatile stval;
 128:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 129:src/../h/Riscv.hpp ****     return stval;
 130:src/../h/Riscv.hpp **** }
 131:src/../h/Riscv.hpp **** 
 132:src/../h/Riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 133:src/../h/Riscv.hpp **** {
 134:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 135:src/../h/Riscv.hpp **** }
 136:src/../h/Riscv.hpp **** 
 137:src/../h/Riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 138:src/../h/Riscv.hpp **** {
 139:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 140:src/../h/Riscv.hpp **** }
 141:src/../h/Riscv.hpp **** 
 142:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 143:src/../h/Riscv.hpp **** {
 144:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
GAS LISTING /tmp/ccMC4ZM5.s 			page 7


 145:src/../h/Riscv.hpp **** }
 146:src/../h/Riscv.hpp **** 
 147:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sip()
 148:src/../h/Riscv.hpp **** {
 149:src/../h/Riscv.hpp ****     uint64 volatile sip;
 150:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 151:src/../h/Riscv.hpp ****     return sip;
 152:src/../h/Riscv.hpp **** }
 153:src/../h/Riscv.hpp **** 
 154:src/../h/Riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 155:src/../h/Riscv.hpp **** {
 156:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 157:src/../h/Riscv.hpp **** }
 158:src/../h/Riscv.hpp **** 
 159:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 160:src/../h/Riscv.hpp **** {
 161:src/../h/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 162:src/../h/Riscv.hpp **** }
 163:src/../h/Riscv.hpp **** 
 164:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 165:src/../h/Riscv.hpp **** {
 166:src/../h/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 167:src/../h/Riscv.hpp **** }
 168:src/../h/Riscv.hpp **** 
 169:src/../h/Riscv.hpp **** inline uint64 Riscv::r_sstatus()
 170:src/../h/Riscv.hpp **** {
 171:src/../h/Riscv.hpp ****     uint64 volatile sstatus;
 136              		.loc 2 171 5
 172:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 137              		.loc 2 172 5
 138              		.loc 2 172 76 is_stmt 0
 139              	#APP
 140              	# 172 "src/../h/Riscv.hpp" 1
 173              	    return sstatus;
 141              		csrr a5, sstatus
 142              	# 0 "" 2
 143              	#NO_APP
 144 0084 2338F4FC 		sd	a5,-48(s0)
 145              		.loc 2 173 5 is_stmt 1
 146              		.loc 2 173 12 is_stmt 0
 147 0088 833704FD 		ld	a5,-48(s0)
 148              	.LBE83:
 149              	.LBE82:
 150              		.loc 1 61 45
 151 008c 2330F4FA 		sd	a5,-96(s0)
  62:src/Riscv.cpp ****         uint64 code;
 152              		.loc 1 62 9 is_stmt 1
  63:src/Riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (code));
 153              		.loc 1 63 9
 154              		.loc 1 63 52 is_stmt 0
 155              	#APP
 156              	# 63 "src/Riscv.cpp" 1
  64              	        if(code == 0x01)
 157              		mv a5, a0
 158              	# 0 "" 2
 159              	.LVL1:
 160              		.loc 1 64 9 is_stmt 1
GAS LISTING /tmp/ccMC4ZM5.s 			page 8


 161              	#NO_APP
 162              	.LBB84:
 163 0094 6384E718 		beq	a5,a4,.L37
 164              	.LBE84:
 165              	.LBE79:
 166              	.LBE78:
 167              	.LBE284:
 168              	.LBE315:
  65:src/Riscv.cpp ****         {
  66:src/Riscv.cpp ****             //mem alloc
  67:src/Riscv.cpp ****             size_t size;
  68:src/Riscv.cpp ****             uint64 rsize;
  69:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (rsize));
  70:src/Riscv.cpp ****             size = (size_t)rsize;
  71:src/Riscv.cpp ****             void* p = MemAllocator::mem_alloc(size);
  72:src/Riscv.cpp ****             uint64 ptr = (uint64)p;
  73:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ptr));
  74:src/Riscv.cpp ****         }
  75:src/Riscv.cpp ****         else if(code == 0x02)
 169              		.loc 1 75 14
 170              	.LBB316:
 171              	.LBB285:
 172              	.LBB259:
 173              	.LBB243:
 174              	.LBB223:
 175              	.LBB85:
 176 0098 13072000 		li	a4,2
 177 009c 638AE71A 		beq	a5,a4,.L38
 178              	.LBE85:
 179              	.LBE223:
 180              	.LBE243:
 181              	.LBE259:
 182              	.LBE285:
 183              	.LBE316:
  76:src/Riscv.cpp ****         {
  77:src/Riscv.cpp ****             //mem free
  78:src/Riscv.cpp ****             void* ptr;
  79:src/Riscv.cpp ****             uint64 rptr;
  80:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (rptr));
  81:src/Riscv.cpp ****             ptr = (void*)rptr;
  82:src/Riscv.cpp ****             uint64 ret = (uint64)MemAllocator::mem_free(ptr);
  83:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
  84:src/Riscv.cpp ****         }
  85:src/Riscv.cpp ****         else if(code == 0x11)
 184              		.loc 1 85 14
 185              	.LBB317:
 186              	.LBB286:
 187              	.LBB260:
 188              	.LBB244:
 189              	.LBB224:
 190              	.LBB208:
 191              	.LBB86:
 192 00a0 13071001 		li	a4,17
 193 00a4 6380E71C 		beq	a5,a4,.L39
 194              	.LBE86:
 195              	.LBE208:
 196              	.LBE224:
GAS LISTING /tmp/ccMC4ZM5.s 			page 9


 197              	.LBE244:
 198              	.LBE260:
 199              	.LBE286:
 200              	.LBE317:
  86:src/Riscv.cpp ****         {
  87:src/Riscv.cpp ****             //thread_create
  88:src/Riscv.cpp ****             TCB** handle;
  89:src/Riscv.cpp ****             TCB::Body body;
  90:src/Riscv.cpp ****             void* arg;
  91:src/Riscv.cpp **** 
  92:src/Riscv.cpp **** 
  93:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
  94:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
  95:src/Riscv.cpp ****             __asm__ volatile("mv %0, a3" : "=r" (arg));
  96:src/Riscv.cpp **** 
  97:src/Riscv.cpp ****             *handle = TCB::createThread(body, arg, nullptr);
  98:src/Riscv.cpp ****             uint64 ret = -1;
  99:src/Riscv.cpp ****             if(*handle == nullptr)
 100:src/Riscv.cpp ****             {
 101:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 102:src/Riscv.cpp ****             }
 103:src/Riscv.cpp ****             else
 104:src/Riscv.cpp ****             {
 105:src/Riscv.cpp ****                 ret = 0;
 106:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 107:src/Riscv.cpp ****             }
 108:src/Riscv.cpp **** 
 109:src/Riscv.cpp ****         }
 110:src/Riscv.cpp ****         else if(code == 0x12){
 201              		.loc 1 110 14
 202              	.LBB318:
 203              	.LBB287:
 204              	.LBB261:
 205              	.LBB245:
 206              	.LBB225:
 207              	.LBB209:
 208              	.LBB194:
 209              	.LBB87:
 210 00a8 13072001 		li	a4,18
 211 00ac 6388E71E 		beq	a5,a4,.L40
 212              	.LBE87:
 213              	.LBE194:
 214              	.LBE209:
 215              	.LBE225:
 216              	.LBE245:
 217              	.LBE261:
 218              	.LBE287:
 219              	.LBE318:
 111:src/Riscv.cpp ****             //thread_exit
 112:src/Riscv.cpp ****             TCB::running->setFinished(true);
 113:src/Riscv.cpp ****             TCB::dispatch();
 114:src/Riscv.cpp ****             uint64 ret = 0;
 115:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 116:src/Riscv.cpp ****         }
 117:src/Riscv.cpp ****         else if (code == 0x13) {
 220              		.loc 1 117 14
 221              	.LBB319:
GAS LISTING /tmp/ccMC4ZM5.s 			page 10


 222              	.LBB288:
 223              	.LBB262:
 224              	.LBB246:
 225              	.LBB226:
 226              	.LBB210:
 227              	.LBB195:
 228              	.LBB181:
 229              	.LBB88:
 230 00b0 13073001 		li	a4,19
 231 00b4 6388E720 		beq	a5,a4,.L41
 232              	.LBE88:
 233              	.LBE181:
 234              	.LBE195:
 235              	.LBE210:
 236              	.LBE226:
 237              	.LBE246:
 238              	.LBE262:
 239              	.LBE288:
 240              	.LBE319:
 118:src/Riscv.cpp ****             //thread_dispatch
 119:src/Riscv.cpp ****             TCB::dispatch();
 120:src/Riscv.cpp ****         }
 121:src/Riscv.cpp ****         else if (code == 0x21)
 241              		.loc 1 121 14
 242              	.LBB320:
 243              	.LBB289:
 244              	.LBB263:
 245              	.LBB247:
 246              	.LBB227:
 247              	.LBB211:
 248              	.LBB196:
 249              	.LBB182:
 250              	.LBB167:
 251              	.LBB89:
 252 00b8 13071002 		li	a4,33
 253 00bc 638AE720 		beq	a5,a4,.L42
 254              	.LBE89:
 255              	.LBE167:
 256              	.LBE182:
 257              	.LBE196:
 258              	.LBE211:
 259              	.LBE227:
 260              	.LBE247:
 261              	.LBE263:
 262              	.LBE289:
 263              	.LBE320:
 122:src/Riscv.cpp ****         {
 123:src/Riscv.cpp ****             //sem_open
 124:src/Riscv.cpp ****             unsigned init;
 125:src/Riscv.cpp ****             Semaphore** handle;
 126:src/Riscv.cpp ****             uint64 hndl;
 127:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (init));
 128:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 129:src/Riscv.cpp **** 
 130:src/Riscv.cpp ****             handle = (Semaphore**)hndl;
 131:src/Riscv.cpp **** 
 132:src/Riscv.cpp ****             *handle = Semaphore::initSem(init);
GAS LISTING /tmp/ccMC4ZM5.s 			page 11


 133:src/Riscv.cpp ****             uint64 ret = -1;
 134:src/Riscv.cpp ****             if(*handle == nullptr)
 135:src/Riscv.cpp ****             {
 136:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 137:src/Riscv.cpp ****             }
 138:src/Riscv.cpp ****             else
 139:src/Riscv.cpp ****             {
 140:src/Riscv.cpp ****                 ret = 0;
 141:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 142:src/Riscv.cpp ****             }
 143:src/Riscv.cpp **** 
 144:src/Riscv.cpp ****         }
 145:src/Riscv.cpp ****         else if(code == 0x22)
 264              		.loc 1 145 14
 265              	.LBB321:
 266              	.LBB290:
 267              	.LBB264:
 268              	.LBB248:
 269              	.LBB228:
 270              	.LBB212:
 271              	.LBB197:
 272              	.LBB183:
 273              	.LBB168:
 274              	.LBB157:
 275              	.LBB90:
 276 00c0 13072002 		li	a4,34
 277 00c4 6380E724 		beq	a5,a4,.L43
 278              	.LBE90:
 279              	.LBE157:
 280              	.LBE168:
 281              	.LBE183:
 282              	.LBE197:
 283              	.LBE212:
 284              	.LBE228:
 285              	.LBE248:
 286              	.LBE264:
 287              	.LBE290:
 288              	.LBE321:
 146:src/Riscv.cpp ****         {
 147:src/Riscv.cpp ****             //sem_close
 148:src/Riscv.cpp ****             Semaphore* handle;
 149:src/Riscv.cpp ****             uint64 hndl;
 150:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 151:src/Riscv.cpp ****             handle = (Semaphore*)hndl;
 152:src/Riscv.cpp **** 
 153:src/Riscv.cpp ****             uint64 ret = -1;
 154:src/Riscv.cpp ****             if(handle == nullptr)
 155:src/Riscv.cpp ****             {
 156:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 157:src/Riscv.cpp ****             }
 158:src/Riscv.cpp ****             else
 159:src/Riscv.cpp ****             {
 160:src/Riscv.cpp ****                 ret = handle->close();
 161:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 162:src/Riscv.cpp ****             }
 163:src/Riscv.cpp ****         }
 164:src/Riscv.cpp ****         else if(code == 0x23)
GAS LISTING /tmp/ccMC4ZM5.s 			page 12


 289              		.loc 1 164 14
 290              	.LBB322:
 291              	.LBB291:
 292              	.LBB265:
 293              	.LBB249:
 294              	.LBB229:
 295              	.LBB213:
 296              	.LBB198:
 297              	.LBB184:
 298              	.LBB169:
 299              	.LBB158:
 300              	.LBB147:
 301              	.LBB91:
 302 00c8 13073002 		li	a4,35
 303 00cc 638EE724 		beq	a5,a4,.L44
 304              	.LBE91:
 305              	.LBE147:
 306              	.LBE158:
 307              	.LBE169:
 308              	.LBE184:
 309              	.LBE198:
 310              	.LBE213:
 311              	.LBE229:
 312              	.LBE249:
 313              	.LBE265:
 314              	.LBE291:
 315              	.LBE322:
 165:src/Riscv.cpp ****         {
 166:src/Riscv.cpp ****             //sem_wait
 167:src/Riscv.cpp ****             Semaphore* handle;
 168:src/Riscv.cpp ****             uint64 hndl;
 169:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 170:src/Riscv.cpp ****             handle = (Semaphore*)hndl;
 171:src/Riscv.cpp **** 
 172:src/Riscv.cpp ****             uint64 ret = -1;
 173:src/Riscv.cpp ****             if(handle == nullptr)
 174:src/Riscv.cpp ****             {
 175:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 176:src/Riscv.cpp ****             }
 177:src/Riscv.cpp ****             else
 178:src/Riscv.cpp ****             {
 179:src/Riscv.cpp ****                 ret = handle->mwait();
 180:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 181:src/Riscv.cpp ****             }
 182:src/Riscv.cpp ****         }
 183:src/Riscv.cpp ****         else if(code == 0x24)
 316              		.loc 1 183 14
 317              	.LBB323:
 318              	.LBB292:
 319              	.LBB266:
 320              	.LBB250:
 321              	.LBB230:
 322              	.LBB214:
 323              	.LBB199:
 324              	.LBB185:
 325              	.LBB170:
 326              	.LBB159:
GAS LISTING /tmp/ccMC4ZM5.s 			page 13


 327              	.LBB148:
 328              	.LBB138:
 329              	.LBB92:
 330 00d0 13074002 		li	a4,36
 331 00d4 638CE726 		beq	a5,a4,.L45
 332              	.LBE92:
 333              	.LBE138:
 334              	.LBE148:
 335              	.LBE159:
 336              	.LBE170:
 337              	.LBE185:
 338              	.LBE199:
 339              	.LBE214:
 340              	.LBE230:
 341              	.LBE250:
 342              	.LBE266:
 343              	.LBE292:
 344              	.LBE323:
 184:src/Riscv.cpp ****         {
 185:src/Riscv.cpp ****             //sem_signal
 186:src/Riscv.cpp ****             Semaphore* handle;
 187:src/Riscv.cpp **** 
 188:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 189:src/Riscv.cpp ****             uint64 ret = -1;
 190:src/Riscv.cpp ****             if(handle == nullptr)
 191:src/Riscv.cpp ****             {
 192:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 193:src/Riscv.cpp ****             }
 194:src/Riscv.cpp ****             else
 195:src/Riscv.cpp ****             {
 196:src/Riscv.cpp ****                 ret = handle->msignal();
 197:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 198:src/Riscv.cpp ****             }
 199:src/Riscv.cpp ****         }
 200:src/Riscv.cpp ****         else if(code == 0x25)
 345              		.loc 1 200 14
 346              	.LBB324:
 347              	.LBB293:
 348              	.LBB267:
 349              	.LBB251:
 350              	.LBB231:
 351              	.LBB215:
 352              	.LBB200:
 353              	.LBB186:
 354              	.LBB171:
 355              	.LBB160:
 356              	.LBB149:
 357              	.LBB139:
 358              	.LBB130:
 359              	.LBB93:
 360 00d8 13075002 		li	a4,37
 361 00dc 638AE728 		beq	a5,a4,.L46
 362              	.LBE93:
 363              	.LBE130:
 364              	.LBE139:
 365              	.LBE149:
 366              	.LBE160:
GAS LISTING /tmp/ccMC4ZM5.s 			page 14


 367              	.LBE171:
 368              	.LBE186:
 369              	.LBE200:
 370              	.LBE215:
 371              	.LBE231:
 372              	.LBE251:
 373              	.LBE267:
 374              	.LBE293:
 375              	.LBE324:
 201:src/Riscv.cpp ****         {
 202:src/Riscv.cpp ****             //sem_timedwait
 203:src/Riscv.cpp ****             Semaphore* handle;
 204:src/Riscv.cpp ****             uint64 hndl;
 205:src/Riscv.cpp ****             time_t timeout;
 206:src/Riscv.cpp ****             uint64 tmt;
 207:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 208:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (tmt));
 209:src/Riscv.cpp ****             handle = (Semaphore*)hndl;
 210:src/Riscv.cpp ****             timeout = (time_t)tmt;
 211:src/Riscv.cpp **** 
 212:src/Riscv.cpp ****             uint64 ret = -1;
 213:src/Riscv.cpp ****             if(handle == nullptr)
 214:src/Riscv.cpp ****             {
 215:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 216:src/Riscv.cpp ****             }
 217:src/Riscv.cpp ****             else
 218:src/Riscv.cpp ****             {
 219:src/Riscv.cpp ****                 ret = handle->sem_timedwait(timeout);
 220:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 221:src/Riscv.cpp ****             }
 222:src/Riscv.cpp ****         }
 223:src/Riscv.cpp ****         else if(code == 0x26)
 376              		.loc 1 223 14
 377              	.LBB325:
 378              	.LBB294:
 379              	.LBB268:
 380              	.LBB252:
 381              	.LBB232:
 382              	.LBB216:
 383              	.LBB201:
 384              	.LBB187:
 385              	.LBB172:
 386              	.LBB161:
 387              	.LBB150:
 388              	.LBB140:
 389              	.LBB131:
 390              	.LBB123:
 391              	.LBB94:
 392 00e0 13076002 		li	a4,38
 393 00e4 638AE72A 		beq	a5,a4,.L47
 394              	.LBE94:
 395              	.LBE123:
 396              	.LBE131:
 397              	.LBE140:
 398              	.LBE150:
 399              	.LBE161:
 400              	.LBE172:
GAS LISTING /tmp/ccMC4ZM5.s 			page 15


 401              	.LBE187:
 402              	.LBE201:
 403              	.LBE216:
 404              	.LBE232:
 405              	.LBE252:
 406              	.LBE268:
 407              	.LBE294:
 408              	.LBE325:
 224:src/Riscv.cpp ****         {
 225:src/Riscv.cpp ****             //sem_trywait
 226:src/Riscv.cpp ****             Semaphore* handle;
 227:src/Riscv.cpp ****             uint64 hndl;
 228:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 229:src/Riscv.cpp ****             handle = (Semaphore*)hndl;
 230:src/Riscv.cpp **** 
 231:src/Riscv.cpp ****             uint64 ret = -1;
 232:src/Riscv.cpp ****             if(handle == nullptr)
 233:src/Riscv.cpp ****             {
 234:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 235:src/Riscv.cpp ****             }
 236:src/Riscv.cpp ****             else
 237:src/Riscv.cpp ****             {
 238:src/Riscv.cpp ****                 ret = handle->sem_trywait();
 239:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 240:src/Riscv.cpp ****             }
 241:src/Riscv.cpp ****         }
 242:src/Riscv.cpp ****         else if(code == 0x31)
 409              		.loc 1 242 14
 410              	.LBB326:
 411              	.LBB295:
 412              	.LBB269:
 413              	.LBB253:
 414              	.LBB233:
 415              	.LBB217:
 416              	.LBB202:
 417              	.LBB188:
 418              	.LBB173:
 419              	.LBB162:
 420              	.LBB151:
 421              	.LBB141:
 422              	.LBB132:
 423              	.LBB124:
 424              	.LBB117:
 425              	.LBB95:
 426 00e8 13071003 		li	a4,49
 427 00ec 6388E72C 		beq	a5,a4,.L48
 428              	.LBE95:
 429              	.LBE117:
 430              	.LBE124:
 431              	.LBE132:
 432              	.LBE141:
 433              	.LBE151:
 434              	.LBE162:
 435              	.LBE173:
 436              	.LBE188:
 437              	.LBE202:
 438              	.LBE217:
GAS LISTING /tmp/ccMC4ZM5.s 			page 16


 439              	.LBE233:
 440              	.LBE253:
 441              	.LBE269:
 442              	.LBE295:
 443              	.LBE326:
 243:src/Riscv.cpp ****         {
 244:src/Riscv.cpp ****             //time_sleep
 245:src/Riscv.cpp ****             uint64 ret = -1;
 246:src/Riscv.cpp ****             time_t time;
 247:src/Riscv.cpp ****             uint64 t;
 248:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (t));
 249:src/Riscv.cpp ****             time = (time_t)t;
 250:src/Riscv.cpp ****             if(time == 0)
 251:src/Riscv.cpp ****             {
 252:src/Riscv.cpp ****                 ret = 0;
 253:src/Riscv.cpp ****             }
 254:src/Riscv.cpp ****             else if(time > 0)
 255:src/Riscv.cpp ****             {
 256:src/Riscv.cpp ****                 int s = TCB::running->readStatus();
 257:src/Riscv.cpp ****                 s = s | 2;
 258:src/Riscv.cpp ****                 TCB::running->setStatus(s);
 259:src/Riscv.cpp ****                 sleepList::add(TCB::running, time);
 260:src/Riscv.cpp ****                 thread_dispatch();
 261:src/Riscv.cpp ****                 ret = 0;
 262:src/Riscv.cpp ****             }
 263:src/Riscv.cpp ****             else
 264:src/Riscv.cpp ****             {
 265:src/Riscv.cpp ****                 ret = -2;
 266:src/Riscv.cpp ****             }
 267:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 268:src/Riscv.cpp ****         }
 269:src/Riscv.cpp ****         else if(code == 0x41)
 444              		.loc 1 269 14
 445              	.LBB327:
 446              	.LBB296:
 447              	.LBB270:
 448              	.LBB254:
 449              	.LBB234:
 450              	.LBB218:
 451              	.LBB203:
 452              	.LBB189:
 453              	.LBB174:
 454              	.LBB163:
 455              	.LBB152:
 456              	.LBB142:
 457              	.LBB133:
 458              	.LBB125:
 459              	.LBB118:
 460              	.LBB112:
 461              	.LBB96:
 462 00f0 13071004 		li	a4,65
 463 00f4 6384E730 		beq	a5,a4,.L49
 464              	.LBE96:
 465              	.LBE112:
 466              	.LBE118:
 467              	.LBE125:
 468              	.LBE133:
GAS LISTING /tmp/ccMC4ZM5.s 			page 17


 469              	.LBE142:
 470              	.LBE152:
 471              	.LBE163:
 472              	.LBE174:
 473              	.LBE189:
 474              	.LBE203:
 475              	.LBE218:
 476              	.LBE234:
 477              	.LBE254:
 478              	.LBE270:
 479              	.LBE296:
 480              	.LBE327:
 270:src/Riscv.cpp ****         {
 271:src/Riscv.cpp ****             //getc()
 272:src/Riscv.cpp ****             char c = Cconsole::getChIn();
 273:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r"(c));
 274:src/Riscv.cpp ****         }
 275:src/Riscv.cpp ****         else if(code == 0x42)
 481              		.loc 1 275 14
 482              	.LBB328:
 483              	.LBB297:
 484              	.LBB271:
 485              	.LBB255:
 486              	.LBB235:
 487              	.LBB219:
 488              	.LBB204:
 489              	.LBB190:
 490              	.LBB175:
 491              	.LBB164:
 492              	.LBB153:
 493              	.LBB143:
 494              	.LBB134:
 495              	.LBB126:
 496              	.LBB119:
 497              	.LBB113:
 498              	.LBB100:
 499              	.LBB97:
 500 00f8 13072004 		li	a4,66
 501 00fc 6398E712 		bne	a5,a4,.L13
 502              	.LBB98:
 276:src/Riscv.cpp ****         {
 277:src/Riscv.cpp ****             //putc
 278:src/Riscv.cpp ****             uint64 c;
 503              		.loc 1 278 13
 279:src/Riscv.cpp ****             char ch;
 504              		.loc 1 279 13
 280:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (c));
 505              		.loc 1 280 13
 506              		.loc 1 280 53 is_stmt 0
 507              	#APP
 508              	# 280 "src/Riscv.cpp" 1
 281              	            ch = (char)c;
 509              		mv a0, a1
 510              	# 0 "" 2
 511              	.LVL2:
 512              		.loc 1 281 13 is_stmt 1
 282:src/Riscv.cpp ****             //__putc(ch);
GAS LISTING /tmp/ccMC4ZM5.s 			page 18


 283:src/Riscv.cpp ****             Cconsole::putChOut(ch);
 513              		.loc 1 283 13
 514              		.loc 1 283 31 is_stmt 0
 515              	#NO_APP
 516 0104 1375F50F 		andi	a0,a0,0xff
 517              	.LVL3:
 518 0108 97000000 		call	_ZN8Cconsole8putChOutEc@plt
 518      E7800000 
 519              	.LVL4:
 520              	.LBE98:
 521 0110 6F00C011 		j	.L13
 522              	.L35:
 523              	.LBE97:
 524              	.LBE100:
 525              	.LBE113:
 526              	.LBE119:
 527              	.LBE126:
 528              	.LBE134:
 529              	.LBE143:
 530              	.LBE153:
 531              	.LBE164:
 532              	.LBE175:
 533              	.LBE190:
 534              	.LBE204:
 535              	.LBE219:
 536              	.LBE235:
 537              	.LBE255:
 538              	.LBE271:
 539              	.LBE297:
 540              	.LBB298:
  26:src/Riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 541              		.loc 1 26 9 is_stmt 1
 542              	.LBB299:
 543              	.LBB300:
 103:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 544              		.loc 2 103 5
 104:src/../h/Riscv.hpp ****     return sepc;
 545              		.loc 2 104 5
 104:src/../h/Riscv.hpp ****     return sepc;
 546              		.loc 2 104 64 is_stmt 0
 547              	#APP
 548              	# 104 "src/../h/Riscv.hpp" 1
 549              		csrr a5, sepc
 550              	# 0 "" 2
 551              	#NO_APP
 552 0118 233CF4FA 		sd	a5,-72(s0)
 105:src/../h/Riscv.hpp **** }
 553              		.loc 2 105 5 is_stmt 1
 105:src/../h/Riscv.hpp **** }
 554              		.loc 2 105 12 is_stmt 0
 555 011c 833784FB 		ld	a5,-72(s0)
 556              	.LBE300:
 557              	.LBE299:
  26:src/Riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 558              		.loc 1 26 39
 559 0120 233CF4F6 		sd	a5,-136(s0)
  27:src/Riscv.cpp ****         mc_sip(SIP_SSIE);
GAS LISTING /tmp/ccMC4ZM5.s 			page 19


 560              		.loc 1 27 9 is_stmt 1
 561              	.LBB301:
 562              	.LBB302:
 171:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 563              		.loc 2 171 5
 172:src/../h/Riscv.hpp ****     return sstatus;
 564              		.loc 2 172 5
 172:src/../h/Riscv.hpp ****     return sstatus;
 565              		.loc 2 172 76 is_stmt 0
 566              	#APP
 567              	# 172 "src/../h/Riscv.hpp" 1
 568              		csrr a5, sstatus
 569              	# 0 "" 2
 570              	#NO_APP
 571 0128 2338F4FA 		sd	a5,-80(s0)
 572              		.loc 2 173 5 is_stmt 1
 573              		.loc 2 173 12 is_stmt 0
 574 012c 833704FB 		ld	a5,-80(s0)
 575              	.LBE302:
 576              	.LBE301:
  27:src/Riscv.cpp ****         mc_sip(SIP_SSIE);
 577              		.loc 1 27 45
 578 0130 2330F4F8 		sd	a5,-128(s0)
  28:src/Riscv.cpp ****         //za threadsleep lupiti takt
 579              		.loc 1 28 9 is_stmt 1
 580              	.LVL5:
 581              	.LBB303:
 582              	.LBB304:
 144:src/../h/Riscv.hpp **** }
 583              		.loc 2 144 5
 144:src/../h/Riscv.hpp **** }
 584              		.loc 2 144 64 is_stmt 0
 585 0134 93072000 		li	a5,2
 586              	#APP
 587              	# 144 "src/../h/Riscv.hpp" 1
 588              		csrc sip, a5
 589              	# 0 "" 2
 590              	.LVL6:
 591              	#NO_APP
 592              	.LBE304:
 593              	.LBE303:
  30:src/Riscv.cpp ****         sleepList::cleanFinished();
 594              		.loc 1 30 9 is_stmt 1
  30:src/Riscv.cpp ****         sleepList::cleanFinished();
 595              		.loc 1 30 25 is_stmt 0
 596 013c 97000000 		call	_ZN9sleepList5clockEv@plt
 596      E7800000 
 597              	.LVL7:
  31:src/Riscv.cpp ****         TCB::timeSliceCounter++;
 598              		.loc 1 31 9 is_stmt 1
  31:src/Riscv.cpp ****         TCB::timeSliceCounter++;
 599              		.loc 1 31 33 is_stmt 0
 600 0144 97000000 		call	_ZN9sleepList13cleanFinishedEv@plt
 600      E7800000 
 601              	.LVL8:
  32:src/Riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 602              		.loc 1 32 9 is_stmt 1
GAS LISTING /tmp/ccMC4ZM5.s 			page 20


  32:src/Riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 603              		.loc 1 32 30 is_stmt 0
 604 014c 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 604      03370700 
 605 0154 83370700 		ld	a5,0(a4)
 606 0158 93871700 		addi	a5,a5,1
 607 015c 2330F700 		sd	a5,0(a4)
  33:src/Riscv.cpp ****         {
 608              		.loc 1 33 9 is_stmt 1
  33:src/Riscv.cpp ****         {
 609              		.loc 1 33 64 is_stmt 0
 610 0160 17070000 		la	a4,_ZN3TCB7runningE
 610      03370700 
 611 0168 03370700 		ld	a4,0(a4)
 612              	.LVL9:
 613              	.LBB305:
 614              	.LBB306:
 615              		.file 3 "src/../h/../h/../h/tcb.hpp"
   1:src/../h/../h/../h/tcb.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   2:src/../h/../h/../h/tcb.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_TCB_HPP
   3:src/../h/../h/../h/tcb.hpp **** 
   4:src/../h/../h/../h/tcb.hpp **** #include "../lib/hw.h"
   5:src/../h/../h/../h/tcb.hpp **** #include "scheduler.hpp"
   6:src/../h/../h/../h/tcb.hpp **** #include "syscall_c.h"
   7:src/../h/../h/../h/tcb.hpp **** class TCB
   8:src/../h/../h/../h/tcb.hpp **** {
   9:src/../h/../h/../h/tcb.hpp **** public:
  10:src/../h/../h/../h/tcb.hpp **** 
  11:src/../h/../h/../h/tcb.hpp ****     void setStatus(int s) { status = s; }
  12:src/../h/../h/../h/tcb.hpp ****     //s = 01 (1)blocked
  13:src/../h/../h/../h/tcb.hpp ****     //s = 10 (2)sleeping
  14:src/../h/../h/../h/tcb.hpp ****     //s = 11 (3)blocked i sleeping
  15:src/../h/../h/../h/tcb.hpp ****     int readStatus(){ return status; }
  16:src/../h/../h/../h/tcb.hpp **** 
  17:src/../h/../h/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  18:src/../h/../h/../h/tcb.hpp **** 
  19:src/../h/../h/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  20:src/../h/../h/../h/tcb.hpp **** 
  21:src/../h/../h/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  22:src/../h/../h/../h/tcb.hpp **** 
  23:src/../h/../h/../h/tcb.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 616              		.loc 3 23 35 is_stmt 1
 617              		.loc 3 23 42 is_stmt 0
 618 016c 03370702 		ld	a4,32(a4)
 619              	.LVL10:
 620              	.LBE306:
 621              	.LBE305:
  33:src/Riscv.cpp ****         {
 622              		.loc 1 33 9
 623 0170 63FCE700 		bgeu	a5,a4,.L50
 624              	.L5:
  37:src/Riscv.cpp ****         w_sepc(sepc);
 625              		.loc 1 37 9 is_stmt 1
  37:src/Riscv.cpp ****         w_sepc(sepc);
 626              		.loc 1 37 18 is_stmt 0
 627 0174 833704F8 		ld	a5,-128(s0)
 628              	.LVL11:
GAS LISTING /tmp/ccMC4ZM5.s 			page 21


 629              	.LBB307:
 630              	.LBB308:
 174:src/../h/Riscv.hpp **** }
 175:src/../h/Riscv.hpp **** 
 176:src/../h/Riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 177:src/../h/Riscv.hpp **** {
 178:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 631              		.loc 2 178 5 is_stmt 1
 632              		.loc 2 178 77 is_stmt 0
 633              	#APP
 634              	# 178 "src/../h/Riscv.hpp" 1
 179              	}
 635              		csrw sstatus, a5
 636              	# 0 "" 2
 637              	.LVL12:
 638              	#NO_APP
 639              	.LBE308:
 640              	.LBE307:
  38:src/Riscv.cpp **** 
 641              		.loc 1 38 9 is_stmt 1
  38:src/Riscv.cpp **** 
 642              		.loc 1 38 15 is_stmt 0
 643 017c 833784F7 		ld	a5,-136(s0)
 644              	.LVL13:
 645              	.LBB309:
 646              	.LBB310:
 110:src/../h/Riscv.hpp **** }
 647              		.loc 2 110 5 is_stmt 1
 110:src/../h/Riscv.hpp **** }
 648              		.loc 2 110 65 is_stmt 0
 649              	#APP
 650              	# 110 "src/../h/Riscv.hpp" 1
 111:src/../h/Riscv.hpp **** 
 651              		csrw sepc, a5
 652              	# 0 "" 2
 653              		.loc 2 111 1
 654              	#NO_APP
 655 0184 6F00800B 		j	.L3
 656              	.LVL14:
 657              	.L50:
 658              	.LBE310:
 659              	.LBE309:
  35:src/Riscv.cpp ****         }
 660              		.loc 1 35 13 is_stmt 1
  35:src/Riscv.cpp ****         }
 661              		.loc 1 35 26 is_stmt 0
 662 0188 97000000 		call	_ZN3TCB8dispatchEv@plt
 662      E7800000 
 663              	.LVL15:
 664 0190 6FF05FFE 		j	.L5
 665              	.L36:
 666              	.LBE298:
 667              	.LBB311:
 668              	.LBB272:
  42:src/Riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 669              		.loc 1 42 9 is_stmt 1
 670              	.LBB273:
GAS LISTING /tmp/ccMC4ZM5.s 			page 22


 671              	.LBB274:
 103:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 672              		.loc 2 103 5
 104:src/../h/Riscv.hpp ****     return sepc;
 673              		.loc 2 104 5
 104:src/../h/Riscv.hpp ****     return sepc;
 674              		.loc 2 104 64 is_stmt 0
 675              	#APP
 676              	# 104 "src/../h/Riscv.hpp" 1
 677              		csrr a5, sepc
 678              	# 0 "" 2
 679              	#NO_APP
 680 0198 2334F4FC 		sd	a5,-56(s0)
 105:src/../h/Riscv.hpp **** }
 681              		.loc 2 105 5 is_stmt 1
 105:src/../h/Riscv.hpp **** }
 682              		.loc 2 105 12 is_stmt 0
 683 019c 833784FC 		ld	a5,-56(s0)
 684              	.LBE274:
 685              	.LBE273:
  42:src/Riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 686              		.loc 1 42 39
 687 01a0 2334F4F8 		sd	a5,-120(s0)
  43:src/Riscv.cpp ****         //prekid od tastature
 688              		.loc 1 43 9 is_stmt 1
 689              	.LBB275:
 690              	.LBB276:
 171:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 691              		.loc 2 171 5
 172:src/../h/Riscv.hpp ****     return sstatus;
 692              		.loc 2 172 5
 172:src/../h/Riscv.hpp ****     return sstatus;
 693              		.loc 2 172 76 is_stmt 0
 694              	#APP
 695              	# 172 "src/../h/Riscv.hpp" 1
 696              		csrr a5, sstatus
 697              	# 0 "" 2
 698              	#NO_APP
 699 01a8 2330F4FC 		sd	a5,-64(s0)
 173:src/../h/Riscv.hpp **** }
 700              		.loc 2 173 5 is_stmt 1
 173:src/../h/Riscv.hpp **** }
 701              		.loc 2 173 12 is_stmt 0
 702 01ac 833704FC 		ld	a5,-64(s0)
 703              	.LBE276:
 704              	.LBE275:
  43:src/Riscv.cpp ****         //prekid od tastature
 705              		.loc 1 43 45
 706 01b0 2338F4F8 		sd	a5,-112(s0)
  45:src/Riscv.cpp ****             while (*(char*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT) {
 707              		.loc 1 45 9 is_stmt 1
  45:src/Riscv.cpp ****             while (*(char*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT) {
 708              		.loc 1 45 22 is_stmt 0
 709 01b4 97000000 		call	plic_claim@plt
 709      E7800000 
 710              	.LVL16:
  45:src/Riscv.cpp ****             while (*(char*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT) {
GAS LISTING /tmp/ccMC4ZM5.s 			page 23


 711              		.loc 1 45 9
 712 01bc 9307A000 		li	a5,10
 713 01c0 630CF500 		beq	a0,a5,.L10
 714              	.L8:
  53:src/Riscv.cpp ****         w_sstatus(sstatus);
 715              		.loc 1 53 9 is_stmt 1
  53:src/Riscv.cpp ****         w_sstatus(sstatus);
 716              		.loc 1 53 15 is_stmt 0
 717 01c4 833784F8 		ld	a5,-120(s0)
 718              	.LVL17:
 719              	.LBB277:
 720              	.LBB278:
 110:src/../h/Riscv.hpp **** }
 721              		.loc 2 110 5 is_stmt 1
 110:src/../h/Riscv.hpp **** }
 722              		.loc 2 110 65 is_stmt 0
 723              	#APP
 724              	# 110 "src/../h/Riscv.hpp" 1
 725              		csrw sepc, a5
 726              	# 0 "" 2
 727              	.LVL18:
 728              	#NO_APP
 729              	.LBE278:
 730              	.LBE277:
  54:src/Riscv.cpp ****     }
 731              		.loc 1 54 9 is_stmt 1
  54:src/Riscv.cpp ****     }
 732              		.loc 1 54 18 is_stmt 0
 733 01cc 833704F9 		ld	a5,-112(s0)
 734              	.LVL19:
 735              	.LBB279:
 736              	.LBB280:
 178:src/../h/Riscv.hpp **** }
 737              		.loc 2 178 5 is_stmt 1
 178:src/../h/Riscv.hpp **** }
 738              		.loc 2 178 77 is_stmt 0
 739              	#APP
 740              	# 178 "src/../h/Riscv.hpp" 1
 741              		csrw sstatus, a5
 742              	# 0 "" 2
 743              		.loc 2 179 1
 744              	#NO_APP
 745 01d4 6F008006 		j	.L3
 746              	.LVL20:
 747              	.L10:
 748              	.LBE280:
 749              	.LBE279:
  46:src/Riscv.cpp ****                 Cconsole::putChIn(*(char *) CONSOLE_RX_DATA);
 750              		.loc 1 46 13 is_stmt 1
  46:src/Riscv.cpp ****                 Cconsole::putChIn(*(char *) CONSOLE_RX_DATA);
 751              		.loc 1 46 45
  46:src/Riscv.cpp ****                 Cconsole::putChIn(*(char *) CONSOLE_RX_DATA);
 752              		.loc 1 46 20 is_stmt 0
 753 01d8 97070000 		la	a5,CONSOLE_STATUS
 753      83B70700 
 754 01e0 83B70700 		ld	a5,0(a5)
 755 01e4 83C70700 		lbu	a5,0(a5)
GAS LISTING /tmp/ccMC4ZM5.s 			page 24


  46:src/Riscv.cpp ****                 Cconsole::putChIn(*(char *) CONSOLE_RX_DATA);
 756              		.loc 1 46 45
 757 01e8 93F71700 		andi	a5,a5,1
 758 01ec 63800702 		beqz	a5,.L9
  47:src/Riscv.cpp ****             }
 759              		.loc 1 47 17 is_stmt 1
  47:src/Riscv.cpp ****             }
 760              		.loc 1 47 34 is_stmt 0
 761 01f0 97070000 		la	a5,CONSOLE_RX_DATA
 761      83B70700 
 762 01f8 83B70700 		ld	a5,0(a5)
 763 01fc 03C50700 		lbu	a0,0(a5)
 764 0200 97000000 		call	_ZN8Cconsole7putChInEc@plt
 764      E7800000 
 765              	.LVL21:
  46:src/Riscv.cpp ****                 Cconsole::putChIn(*(char *) CONSOLE_RX_DATA);
 766              		.loc 1 46 13
 767 0208 6FF01FFD 		j	.L10
 768              	.L9:
  49:src/Riscv.cpp ****         }
 769              		.loc 1 49 13 is_stmt 1
  49:src/Riscv.cpp ****         }
 770              		.loc 1 49 26 is_stmt 0
 771 020c 1305A000 		li	a0,10
 772 0210 97000000 		call	plic_complete@plt
 772      E7800000 
 773              	.LVL22:
 774 0218 6FF0DFFA 		j	.L8
 775              	.LVL23:
 776              	.L37:
 777              	.LBE272:
 778              	.LBB281:
 779              	.LBB256:
 780              	.LBB236:
 781              	.LBB220:
  67:src/Riscv.cpp ****             uint64 rsize;
 782              		.loc 1 67 13 is_stmt 1
  68:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (rsize));
 783              		.loc 1 68 13
  69:src/Riscv.cpp ****             size = (size_t)rsize;
 784              		.loc 1 69 13
  69:src/Riscv.cpp ****             size = (size_t)rsize;
 785              		.loc 1 69 57 is_stmt 0
 786              	#APP
 787              	# 69 "src/Riscv.cpp" 1
 788              		mv a0, a1
 789              	# 0 "" 2
 790              	.LVL24:
  70:src/Riscv.cpp ****             void* p = MemAllocator::mem_alloc(size);
 791              		.loc 1 70 13 is_stmt 1
  71:src/Riscv.cpp ****             uint64 ptr = (uint64)p;
 792              		.loc 1 71 13
  71:src/Riscv.cpp ****             uint64 ptr = (uint64)p;
 793              		.loc 1 71 46 is_stmt 0
 794              	#NO_APP
 795 0220 97000000 		call	_ZN12MemAllocator9mem_allocEm@plt
 795      E7800000 
GAS LISTING /tmp/ccMC4ZM5.s 			page 25


 796              	.LVL25:
  72:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ptr));
 797              		.loc 1 72 13 is_stmt 1
  73:src/Riscv.cpp ****         }
 798              		.loc 1 73 13
  73:src/Riscv.cpp ****         }
 799              		.loc 1 73 60 is_stmt 0
 800              	#APP
 801              	# 73 "src/Riscv.cpp" 1
 802              		sd a0, 80(fp)
 803              	# 0 "" 2
 804              	.LVL26:
 805              	#NO_APP
 806              	.L13:
 807              	.LBE220:
 808              	.LBE236:
 284:src/Riscv.cpp **** 
 285:src/Riscv.cpp ****         }
 286:src/Riscv.cpp ****         else
 287:src/Riscv.cpp ****         {
 288:src/Riscv.cpp ****             //TCB::dispatch();
 289:src/Riscv.cpp ****         }
 290:src/Riscv.cpp ****         //upisujemo nove
 291:src/Riscv.cpp ****         w_sstatus(sstatus);
 809              		.loc 1 291 9 is_stmt 1
 810              		.loc 1 291 18 is_stmt 0
 811 022c 833704FA 		ld	a5,-96(s0)
 812              	.LVL27:
 813              	.LBB237:
 814              	.LBB238:
 178:src/../h/Riscv.hpp **** }
 815              		.loc 2 178 5 is_stmt 1
 178:src/../h/Riscv.hpp **** }
 816              		.loc 2 178 77 is_stmt 0
 817              	#APP
 818              	# 178 "src/../h/Riscv.hpp" 1
 819              		csrw sstatus, a5
 820              	# 0 "" 2
 821              	.LVL28:
 822              	#NO_APP
 823              	.LBE238:
 824              	.LBE237:
 292:src/Riscv.cpp ****         w_sepc(sepc);
 825              		.loc 1 292 9 is_stmt 1
 826              		.loc 1 292 15 is_stmt 0
 827 0234 833784F9 		ld	a5,-104(s0)
 828              	.LVL29:
 829              	.LBB239:
 830              	.LBB240:
 110:src/../h/Riscv.hpp **** }
 831              		.loc 2 110 5 is_stmt 1
 110:src/../h/Riscv.hpp **** }
 832              		.loc 2 110 65 is_stmt 0
 833              	#APP
 834              	# 110 "src/../h/Riscv.hpp" 1
 835              		csrw sepc, a5
 836              	# 0 "" 2
GAS LISTING /tmp/ccMC4ZM5.s 			page 26


 837              	.LVL30:
 838              	#NO_APP
 839              	.L3:
 840              	.LBE240:
 841              	.LBE239:
 842              	.LBE256:
 843              	.LBE281:
 844              	.LBE311:
 845              	.LBE328:
 293:src/Riscv.cpp ****     }
 294:src/Riscv.cpp ****     else
 295:src/Riscv.cpp ****     {
 296:src/Riscv.cpp ****         //unexpected trap cause
 297:src/Riscv.cpp ****         mprintString("\nunexpected trap cause: ");
 298:src/Riscv.cpp ****         printInteger(scauseReg);
 299:src/Riscv.cpp ****         mprintString("\n");
 300:src/Riscv.cpp ****         thread_dispatch();
 301:src/Riscv.cpp ****         __asm__ volatile("li a0,0x5555");
 302:src/Riscv.cpp ****         __asm__ volatile("li a1,0x100000");
 303:src/Riscv.cpp ****         __asm__ volatile("sw a0, 0(a1)");
 304:src/Riscv.cpp ****     }
 305:src/Riscv.cpp **** }...
 846              		.loc 1 305 1
 847 023c 83308108 		ld	ra,136(sp)
 848              		.cfi_remember_state
 849              		.cfi_restore 1
 850 0240 03340108 		ld	s0,128(sp)
 851              		.cfi_restore 8
 852              		.cfi_def_cfa 2, 144
 853 0244 83348107 		ld	s1,120(sp)
 854              		.cfi_restore 9
 855 0248 13010109 		addi	sp,sp,144
 856              		.cfi_def_cfa_offset 0
 857 024c 67800000 		jr	ra
 858              	.LVL31:
 859              	.L38:
 860              		.cfi_restore_state
 861              	.LBB329:
 862              	.LBB312:
 863              	.LBB282:
 864              	.LBB257:
 865              	.LBB241:
 866              	.LBB221:
 867              	.LBB205:
  78:src/Riscv.cpp ****             void* ptr;
 868              		.loc 1 78 13 is_stmt 1
  79:src/Riscv.cpp ****             uint64 rptr;
 869              		.loc 1 79 13
  80:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (rptr));
 870              		.loc 1 80 13
  80:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (rptr));
 871              		.loc 1 80 56 is_stmt 0
 872              	#APP
 873              	# 80 "src/Riscv.cpp" 1
 874              		mv a0, a1
 875              	# 0 "" 2
 876              	.LVL32:
GAS LISTING /tmp/ccMC4ZM5.s 			page 27


  81:src/Riscv.cpp ****             ptr = (void*)rptr;
 877              		.loc 1 81 13 is_stmt 1
  82:src/Riscv.cpp ****             uint64 ret = (uint64)MemAllocator::mem_free(ptr);
 878              		.loc 1 82 13
  82:src/Riscv.cpp ****             uint64 ret = (uint64)MemAllocator::mem_free(ptr);
 879              		.loc 1 82 56 is_stmt 0
 880              	#NO_APP
 881 0254 97000000 		call	_ZN12MemAllocator8mem_freeEPv@plt
 881      E7800000 
 882              	.LVL33:
  83:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 883              		.loc 1 83 13 is_stmt 1
  83:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 884              		.loc 1 83 60 is_stmt 0
 885              	#APP
 886              	# 83 "src/Riscv.cpp" 1
 887              		sd a0, 80(fp)
 888              	# 0 "" 2
 889              	#NO_APP
 890              	.LBE205:
 891 0260 6FF0DFFC 		j	.L13
 892              	.LVL34:
 893              	.L39:
 894              	.LBB206:
 895              	.LBB191:
  88:src/Riscv.cpp ****             TCB** handle;
 896              		.loc 1 88 13 is_stmt 1
  89:src/Riscv.cpp ****             TCB::Body body;
 897              		.loc 1 89 13
  90:src/Riscv.cpp ****             void* arg;
 898              		.loc 1 90 13
  93:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 899              		.loc 1 93 13
  93:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 900              		.loc 1 93 58 is_stmt 0
 901              	#APP
 902              	# 93 "src/Riscv.cpp" 1
 903              		mv s1, a1
 904              	# 0 "" 2
 905              	.LVL35:
  94:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
 906              		.loc 1 94 13 is_stmt 1
  94:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (body));
 907              		.loc 1 94 56 is_stmt 0
 908              	# 94 "src/Riscv.cpp" 1
 909              		mv a0, a2
 910              	# 0 "" 2
 911              	.LVL36:
  95:src/Riscv.cpp ****             __asm__ volatile("mv %0, a3" : "=r" (arg));
 912              		.loc 1 95 13 is_stmt 1
  95:src/Riscv.cpp ****             __asm__ volatile("mv %0, a3" : "=r" (arg));
 913              		.loc 1 95 55 is_stmt 0
 914              	# 95 "src/Riscv.cpp" 1
 915              		mv a1, a3
 916              	# 0 "" 2
 917              	.LVL37:
  97:src/Riscv.cpp ****             *handle = TCB::createThread(body, arg, nullptr);
GAS LISTING /tmp/ccMC4ZM5.s 			page 28


 918              		.loc 1 97 13 is_stmt 1
  97:src/Riscv.cpp ****             *handle = TCB::createThread(body, arg, nullptr);
 919              		.loc 1 97 40 is_stmt 0
 920              	#NO_APP
 921 0270 13060000 		li	a2,0
 922 0274 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 922      E7800000 
 923              	.LVL38:
  97:src/Riscv.cpp ****             *handle = TCB::createThread(body, arg, nullptr);
 924              		.loc 1 97 21
 925 027c 23B0A400 		sd	a0,0(s1)
  98:src/Riscv.cpp ****             uint64 ret = -1;
 926              		.loc 1 98 13 is_stmt 1
 927              	.LVL39:
  99:src/Riscv.cpp ****             if(*handle == nullptr)
 928              		.loc 1 99 13
 929 0280 63080500 		beqz	a0,.L51
 105:src/Riscv.cpp ****                 ret = 0;
 930              		.loc 1 105 17
 931              	.LVL40:
 106:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 932              		.loc 1 106 17
 106:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 933              		.loc 1 106 64 is_stmt 0
 934 0284 93070000 		li	a5,0
 935              	#APP
 936              	# 106 "src/Riscv.cpp" 1
 937              		sd a5, 80(fp)
 938              	# 0 "" 2
 939              	#NO_APP
 940 028c 6FF01FFA 		j	.L13
 941              	.LVL41:
 942              	.L51:
 101:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 943              		.loc 1 101 17 is_stmt 1
 101:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 944              		.loc 1 101 64 is_stmt 0
 945 0290 9307F0FF 		li	a5,-1
 946              	#APP
 947              	# 101 "src/Riscv.cpp" 1
 948              		sd a5, 80(fp)
 949              	# 0 "" 2
 950              	#NO_APP
 951 0298 6FF05FF9 		j	.L13
 952              	.LVL42:
 953              	.L40:
 954              	.LBE191:
 955              	.LBB192:
 956              	.LBB176:
 112:src/Riscv.cpp ****             TCB::running->setFinished(true);
 957              		.loc 1 112 13 is_stmt 1
 112:src/Riscv.cpp ****             TCB::running->setFinished(true);
 958              		.loc 1 112 38 is_stmt 0
 959 029c 97070000 		la	a5,_ZN3TCB7runningE
 959      83B70700 
 960              	.LVL43:
 961 02a4 83B70700 		ld	a5,0(a5)
GAS LISTING /tmp/ccMC4ZM5.s 			page 29


 962              	.LVL44:
 963              	.LBB177:
 964              	.LBB178:
  21:src/../h/../h/../h/tcb.hpp **** 
 965              		.loc 3 21 36 is_stmt 1
  21:src/../h/../h/../h/tcb.hpp **** 
 966              		.loc 3 21 45 is_stmt 0
 967 02a8 13071000 		li	a4,1
 968 02ac 2384E702 		sb	a4,40(a5)
 969              	.LVL45:
 970              	.LBE178:
 971              	.LBE177:
 113:src/Riscv.cpp ****             TCB::dispatch();
 972              		.loc 1 113 13 is_stmt 1
 113:src/Riscv.cpp ****             TCB::dispatch();
 973              		.loc 1 113 26 is_stmt 0
 974 02b0 97000000 		call	_ZN3TCB8dispatchEv@plt
 974      E7800000 
 975              	.LVL46:
 114:src/Riscv.cpp ****             uint64 ret = 0;
 976              		.loc 1 114 13 is_stmt 1
 115:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 977              		.loc 1 115 13
 115:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 978              		.loc 1 115 60 is_stmt 0
 979 02b8 93070000 		li	a5,0
 980              	#APP
 981              	# 115 "src/Riscv.cpp" 1
 982              		sd a5, 80(fp)
 983              	# 0 "" 2
 984              	#NO_APP
 985              	.LBE176:
 986 02c0 6FF0DFF6 		j	.L13
 987              	.LVL47:
 988              	.L41:
 989              	.LBB179:
 119:src/Riscv.cpp ****             TCB::dispatch();
 990              		.loc 1 119 13 is_stmt 1
 119:src/Riscv.cpp ****             TCB::dispatch();
 991              		.loc 1 119 26 is_stmt 0
 992 02c4 97000000 		call	_ZN3TCB8dispatchEv@plt
 992      E7800000 
 993              	.LVL48:
 994 02cc 6FF01FF6 		j	.L13
 995              	.LVL49:
 996              	.L42:
 997              	.LBB165:
 998              	.LBB154:
 124:src/Riscv.cpp ****             unsigned init;
 999              		.loc 1 124 13 is_stmt 1
 125:src/Riscv.cpp ****             Semaphore** handle;
 1000              		.loc 1 125 13
 126:src/Riscv.cpp ****             uint64 hndl;
 1001              		.loc 1 126 13
 127:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (init));
 1002              		.loc 1 127 13
 127:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (init));
GAS LISTING /tmp/ccMC4ZM5.s 			page 30


 1003              		.loc 1 127 56 is_stmt 0
 1004              	#APP
 1005              	# 127 "src/Riscv.cpp" 1
 1006              		mv a0, a2
 1007              	# 0 "" 2
 1008              	.LVL50:
 128:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1009              		.loc 1 128 13 is_stmt 1
 128:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1010              		.loc 1 128 56 is_stmt 0
 1011              	# 128 "src/Riscv.cpp" 1
 1012              		mv s1, a1
 1013              	# 0 "" 2
 1014              	.LVL51:
 130:src/Riscv.cpp ****             handle = (Semaphore**)hndl;
 1015              		.loc 1 130 13 is_stmt 1
 132:src/Riscv.cpp ****             *handle = Semaphore::initSem(init);
 1016              		.loc 1 132 13
 132:src/Riscv.cpp ****             *handle = Semaphore::initSem(init);
 1017              		.loc 1 132 41 is_stmt 0
 1018              	#NO_APP
 1019 02d8 1B050500 		sext.w	a0,a0
 1020 02dc 97000000 		call	_ZN9Semaphore7initSemEi@plt
 1020      E7800000 
 1021              	.LVL52:
 132:src/Riscv.cpp ****             *handle = Semaphore::initSem(init);
 1022              		.loc 1 132 21
 1023 02e4 23B0A400 		sd	a0,0(s1)
 133:src/Riscv.cpp ****             uint64 ret = -1;
 1024              		.loc 1 133 13 is_stmt 1
 1025              	.LVL53:
 134:src/Riscv.cpp ****             if(*handle == nullptr)
 1026              		.loc 1 134 13
 1027 02e8 63080500 		beqz	a0,.L52
 140:src/Riscv.cpp ****                 ret = 0;
 1028              		.loc 1 140 17
 1029              	.LVL54:
 141:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1030              		.loc 1 141 17
 141:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1031              		.loc 1 141 64 is_stmt 0
 1032 02ec 93070000 		li	a5,0
 1033              	#APP
 1034              	# 141 "src/Riscv.cpp" 1
 1035              		sd a5, 80(fp)
 1036              	# 0 "" 2
 1037              	#NO_APP
 1038 02f4 6FF09FF3 		j	.L13
 1039              	.LVL55:
 1040              	.L52:
 136:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1041              		.loc 1 136 17 is_stmt 1
 136:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1042              		.loc 1 136 64 is_stmt 0
 1043 02f8 9307F0FF 		li	a5,-1
 1044              	#APP
 1045              	# 136 "src/Riscv.cpp" 1
GAS LISTING /tmp/ccMC4ZM5.s 			page 31


 1046              		sd a5, 80(fp)
 1047              	# 0 "" 2
 1048              	#NO_APP
 1049 0300 6FF0DFF2 		j	.L13
 1050              	.LVL56:
 1051              	.L43:
 1052              	.LBE154:
 1053              	.LBB155:
 1054              	.LBB144:
 148:src/Riscv.cpp ****             Semaphore* handle;
 1055              		.loc 1 148 13 is_stmt 1
 149:src/Riscv.cpp ****             uint64 hndl;
 1056              		.loc 1 149 13
 150:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1057              		.loc 1 150 13
 150:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1058              		.loc 1 150 56 is_stmt 0
 1059              	#APP
 1060              	# 150 "src/Riscv.cpp" 1
 1061              		mv a0, a1
 1062              	# 0 "" 2
 1063              	.LVL57:
 151:src/Riscv.cpp ****             handle = (Semaphore*)hndl;
 1064              		.loc 1 151 13 is_stmt 1
 153:src/Riscv.cpp ****             uint64 ret = -1;
 1065              		.loc 1 153 13
 154:src/Riscv.cpp ****             if(handle == nullptr)
 1066              		.loc 1 154 13
 1067              	#NO_APP
 1068 0308 63180500 		bnez	a0,.L22
 156:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1069              		.loc 1 156 17
 156:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1070              		.loc 1 156 64 is_stmt 0
 1071 030c 9307F0FF 		li	a5,-1
 1072              	.LVL58:
 1073              	#APP
 1074              	# 156 "src/Riscv.cpp" 1
 1075              		sd a5, 80(fp)
 1076              	# 0 "" 2
 1077              	#NO_APP
 1078 0314 6FF09FF1 		j	.L13
 1079              	.LVL59:
 1080              	.L22:
 160:src/Riscv.cpp ****                 ret = handle->close();
 1081              		.loc 1 160 17 is_stmt 1
 160:src/Riscv.cpp ****                 ret = handle->close();
 1082              		.loc 1 160 36 is_stmt 0
 1083 0318 97000000 		call	_ZN9Semaphore5closeEv@plt
 1083      E7800000 
 1084              	.LVL60:
 161:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1085              		.loc 1 161 17 is_stmt 1
 161:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1086              		.loc 1 161 64 is_stmt 0
 1087              	#APP
 1088              	# 161 "src/Riscv.cpp" 1
GAS LISTING /tmp/ccMC4ZM5.s 			page 32


 1089              		sd a0, 80(fp)
 1090              	# 0 "" 2
 1091              	#NO_APP
 1092 0324 6FF09FF0 		j	.L13
 1093              	.LVL61:
 1094              	.L44:
 1095              	.LBE144:
 1096              	.LBB145:
 1097              	.LBB135:
 167:src/Riscv.cpp ****             Semaphore* handle;
 1098              		.loc 1 167 13 is_stmt 1
 168:src/Riscv.cpp ****             uint64 hndl;
 1099              		.loc 1 168 13
 169:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1100              		.loc 1 169 13
 169:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1101              		.loc 1 169 56 is_stmt 0
 1102              	#APP
 1103              	# 169 "src/Riscv.cpp" 1
 1104              		mv a0, a1
 1105              	# 0 "" 2
 1106              	.LVL62:
 170:src/Riscv.cpp ****             handle = (Semaphore*)hndl;
 1107              		.loc 1 170 13 is_stmt 1
 172:src/Riscv.cpp ****             uint64 ret = -1;
 1108              		.loc 1 172 13
 173:src/Riscv.cpp ****             if(handle == nullptr)
 1109              		.loc 1 173 13
 1110              	#NO_APP
 1111 032c 63180500 		bnez	a0,.L24
 175:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1112              		.loc 1 175 17
 175:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1113              		.loc 1 175 64 is_stmt 0
 1114 0330 9307F0FF 		li	a5,-1
 1115              	.LVL63:
 1116              	#APP
 1117              	# 175 "src/Riscv.cpp" 1
 1118              		sd a5, 80(fp)
 1119              	# 0 "" 2
 1120              	#NO_APP
 1121 0338 6FF05FEF 		j	.L13
 1122              	.LVL64:
 1123              	.L24:
 179:src/Riscv.cpp ****                 ret = handle->mwait();
 1124              		.loc 1 179 17 is_stmt 1
 179:src/Riscv.cpp ****                 ret = handle->mwait();
 1125              		.loc 1 179 36 is_stmt 0
 1126 033c 97000000 		call	_ZN9Semaphore5mwaitEv@plt
 1126      E7800000 
 1127              	.LVL65:
 180:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1128              		.loc 1 180 17 is_stmt 1
 180:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1129              		.loc 1 180 64 is_stmt 0
 1130              	#APP
 1131              	# 180 "src/Riscv.cpp" 1
GAS LISTING /tmp/ccMC4ZM5.s 			page 33


 1132              		sd a0, 80(fp)
 1133              	# 0 "" 2
 1134              	#NO_APP
 1135 0348 6FF05FEE 		j	.L13
 1136              	.LVL66:
 1137              	.L45:
 1138              	.LBE135:
 1139              	.LBB136:
 1140              	.LBB127:
 186:src/Riscv.cpp ****             Semaphore* handle;
 1141              		.loc 1 186 13 is_stmt 1
 188:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 1142              		.loc 1 188 13
 188:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (handle));
 1143              		.loc 1 188 58 is_stmt 0
 1144              	#APP
 1145              	# 188 "src/Riscv.cpp" 1
 1146              		mv a0, a1
 1147              	# 0 "" 2
 1148              	.LVL67:
 189:src/Riscv.cpp ****             uint64 ret = -1;
 1149              		.loc 1 189 13 is_stmt 1
 190:src/Riscv.cpp ****             if(handle == nullptr)
 1150              		.loc 1 190 13
 1151              	#NO_APP
 1152 0350 630A0500 		beqz	a0,.L53
 196:src/Riscv.cpp ****                 ret = handle->msignal();
 1153              		.loc 1 196 17
 196:src/Riscv.cpp ****                 ret = handle->msignal();
 1154              		.loc 1 196 38 is_stmt 0
 1155 0354 97000000 		call	_ZN9Semaphore7msignalEv@plt
 1155      E7800000 
 1156              	.LVL68:
 197:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1157              		.loc 1 197 17 is_stmt 1
 197:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1158              		.loc 1 197 64 is_stmt 0
 1159              	#APP
 1160              	# 197 "src/Riscv.cpp" 1
 1161              		sd a0, 80(fp)
 1162              	# 0 "" 2
 1163              	#NO_APP
 1164 0360 6FF0DFEC 		j	.L13
 1165              	.LVL69:
 1166              	.L53:
 192:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1167              		.loc 1 192 17 is_stmt 1
 192:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1168              		.loc 1 192 64 is_stmt 0
 1169 0364 9307F0FF 		li	a5,-1
 1170              	.LVL70:
 1171              	#APP
 1172              	# 192 "src/Riscv.cpp" 1
 1173              		sd a5, 80(fp)
 1174              	# 0 "" 2
 1175              	#NO_APP
 1176 036c 6FF01FEC 		j	.L13
GAS LISTING /tmp/ccMC4ZM5.s 			page 34


 1177              	.LVL71:
 1178              	.L46:
 1179              	.LBE127:
 1180              	.LBB128:
 1181              	.LBB120:
 203:src/Riscv.cpp ****             Semaphore* handle;
 1182              		.loc 1 203 13 is_stmt 1
 204:src/Riscv.cpp ****             uint64 hndl;
 1183              		.loc 1 204 13
 205:src/Riscv.cpp ****             time_t timeout;
 1184              		.loc 1 205 13
 206:src/Riscv.cpp ****             uint64 tmt;
 1185              		.loc 1 206 13
 207:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1186              		.loc 1 207 13
 207:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1187              		.loc 1 207 56 is_stmt 0
 1188              	#APP
 1189              	# 207 "src/Riscv.cpp" 1
 1190              		mv a0, a1
 1191              	# 0 "" 2
 1192              	.LVL72:
 208:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (tmt));
 1193              		.loc 1 208 13 is_stmt 1
 208:src/Riscv.cpp ****             __asm__ volatile("mv %0, a2" : "=r" (tmt));
 1194              		.loc 1 208 55 is_stmt 0
 1195              	# 208 "src/Riscv.cpp" 1
 1196              		mv a1, a2
 1197              	# 0 "" 2
 1198              	.LVL73:
 209:src/Riscv.cpp ****             handle = (Semaphore*)hndl;
 1199              		.loc 1 209 13 is_stmt 1
 210:src/Riscv.cpp ****             timeout = (time_t)tmt;
 1200              		.loc 1 210 13
 212:src/Riscv.cpp ****             uint64 ret = -1;
 1201              		.loc 1 212 13
 213:src/Riscv.cpp ****             if(handle == nullptr)
 1202              		.loc 1 213 13
 1203              	#NO_APP
 1204 0378 63180500 		bnez	a0,.L28
 215:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1205              		.loc 1 215 17
 215:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1206              		.loc 1 215 64 is_stmt 0
 1207 037c 9307F0FF 		li	a5,-1
 1208              	.LVL74:
 1209              	#APP
 1210              	# 215 "src/Riscv.cpp" 1
 1211              		sd a5, 80(fp)
 1212              	# 0 "" 2
 1213              	#NO_APP
 1214 0384 6FF09FEA 		j	.L13
 1215              	.LVL75:
 1216              	.L28:
 219:src/Riscv.cpp ****                 ret = handle->sem_timedwait(timeout);
 1217              		.loc 1 219 17 is_stmt 1
 219:src/Riscv.cpp ****                 ret = handle->sem_timedwait(timeout);
GAS LISTING /tmp/ccMC4ZM5.s 			page 35


 1218              		.loc 1 219 44 is_stmt 0
 1219 0388 97000000 		call	_ZN9Semaphore13sem_timedwaitEm@plt
 1219      E7800000 
 1220              	.LVL76:
 220:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1221              		.loc 1 220 17 is_stmt 1
 220:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1222              		.loc 1 220 64 is_stmt 0
 1223              	#APP
 1224              	# 220 "src/Riscv.cpp" 1
 1225              		sd a0, 80(fp)
 1226              	# 0 "" 2
 1227              	#NO_APP
 1228 0394 6FF09FE9 		j	.L13
 1229              	.LVL77:
 1230              	.L47:
 1231              	.LBE120:
 1232              	.LBB121:
 1233              	.LBB114:
 226:src/Riscv.cpp ****             Semaphore* handle;
 1234              		.loc 1 226 13 is_stmt 1
 227:src/Riscv.cpp ****             uint64 hndl;
 1235              		.loc 1 227 13
 228:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1236              		.loc 1 228 13
 228:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (hndl));
 1237              		.loc 1 228 56 is_stmt 0
 1238              	#APP
 1239              	# 228 "src/Riscv.cpp" 1
 1240              		mv a0, a1
 1241              	# 0 "" 2
 1242              	.LVL78:
 229:src/Riscv.cpp ****             handle = (Semaphore*)hndl;
 1243              		.loc 1 229 13 is_stmt 1
 231:src/Riscv.cpp ****             uint64 ret = -1;
 1244              		.loc 1 231 13
 232:src/Riscv.cpp ****             if(handle == nullptr)
 1245              		.loc 1 232 13
 1246              	#NO_APP
 1247 039c 63180500 		bnez	a0,.L30
 234:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1248              		.loc 1 234 17
 234:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1249              		.loc 1 234 64 is_stmt 0
 1250 03a0 9307F0FF 		li	a5,-1
 1251              	.LVL79:
 1252              	#APP
 1253              	# 234 "src/Riscv.cpp" 1
 1254              		sd a5, 80(fp)
 1255              	# 0 "" 2
 1256              	#NO_APP
 1257 03a8 6FF05FE8 		j	.L13
 1258              	.LVL80:
 1259              	.L30:
 238:src/Riscv.cpp ****                 ret = handle->sem_trywait();
 1260              		.loc 1 238 17 is_stmt 1
 238:src/Riscv.cpp ****                 ret = handle->sem_trywait();
GAS LISTING /tmp/ccMC4ZM5.s 			page 36


 1261              		.loc 1 238 42 is_stmt 0
 1262 03ac 97000000 		call	_ZN9Semaphore11sem_trywaitEv@plt
 1262      E7800000 
 1263              	.LVL81:
 239:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1264              		.loc 1 239 17 is_stmt 1
 239:src/Riscv.cpp ****                 __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1265              		.loc 1 239 64 is_stmt 0
 1266              	#APP
 1267              	# 239 "src/Riscv.cpp" 1
 1268              		sd a0, 80(fp)
 1269              	# 0 "" 2
 1270              	#NO_APP
 1271 03b8 6FF05FE7 		j	.L13
 1272              	.LVL82:
 1273              	.L48:
 1274              	.LBE114:
 1275              	.LBB115:
 1276              	.LBB101:
 245:src/Riscv.cpp ****             uint64 ret = -1;
 1277              		.loc 1 245 13 is_stmt 1
 246:src/Riscv.cpp ****             time_t time;
 1278              		.loc 1 246 13
 247:src/Riscv.cpp ****             uint64 t;
 1279              		.loc 1 247 13
 248:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (t));
 1280              		.loc 1 248 13
 248:src/Riscv.cpp ****             __asm__ volatile("mv %0, a1" : "=r" (t));
 1281              		.loc 1 248 53 is_stmt 0
 1282              	#APP
 1283              	# 248 "src/Riscv.cpp" 1
 1284              		mv a1, a1
 1285              	# 0 "" 2
 1286              	.LVL83:
 249:src/Riscv.cpp ****             time = (time_t)t;
 1287              		.loc 1 249 13 is_stmt 1
 250:src/Riscv.cpp ****             if(time == 0)
 1288              		.loc 1 250 13
 1289              	#NO_APP
 1290              	.LBB102:
 1291 03c0 63980500 		bnez	a1,.L54
 1292              	.LVL84:
 1293              	.L32:
 1294              	.LBE102:
 267:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1295              		.loc 1 267 13
 267:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r" (ret));
 1296              		.loc 1 267 60 is_stmt 0
 1297 03c4 93070000 		li	a5,0
 1298              	#APP
 1299              	# 267 "src/Riscv.cpp" 1
 1300              		sd a5, 80(fp)
 1301              	# 0 "" 2
 1302              	#NO_APP
 1303              	.LBE101:
 1304 03cc 6FF01FE6 		j	.L13
 1305              	.LVL85:
GAS LISTING /tmp/ccMC4ZM5.s 			page 37


 1306              	.L54:
 1307              	.LBE115:
 1308              	.LBE121:
 1309              	.LBE128:
 1310              	.LBE136:
 1311              	.LBE145:
 1312              	.LBE155:
 1313              	.LBE165:
 1314              	.LBE179:
 1315              	.LBE192:
 1316              	.LBE206:
 1317              	.LBE221:
 1318              	.LBE241:
 1319              	.LBE257:
 1320              	.LBE282:
 1321              	.LBE312:
 1322              	.LBE329:
 254:src/Riscv.cpp ****             else if(time > 0)
 1323              		.loc 1 254 18 is_stmt 1
 1324              	.LBB330:
 1325              	.LBB313:
 1326              	.LBB283:
 1327              	.LBB258:
 1328              	.LBB242:
 1329              	.LBB222:
 1330              	.LBB207:
 1331              	.LBB193:
 1332              	.LBB180:
 1333              	.LBB166:
 1334              	.LBB156:
 1335              	.LBB146:
 1336              	.LBB137:
 1337              	.LBB129:
 1338              	.LBB122:
 1339              	.LBB116:
 1340              	.LBB110:
 1341              	.LBB109:
 1342              	.LBB103:
 1343              	.LBB104:
 256:src/Riscv.cpp ****                 int s = TCB::running->readStatus();
 1344              		.loc 1 256 17
 256:src/Riscv.cpp ****                 int s = TCB::running->readStatus();
 1345              		.loc 1 256 49 is_stmt 0
 1346 03d0 97070000 		la	a5,_ZN3TCB7runningE
 1346      83B70700 
 1347              	.LVL86:
 1348 03d8 03B50700 		ld	a0,0(a5)
 1349              	.LVL87:
 1350              	.LBB105:
 1351              	.LBB106:
  15:src/../h/../h/../h/tcb.hpp **** 
 1352              		.loc 3 15 23 is_stmt 1
  15:src/../h/../h/../h/tcb.hpp **** 
 1353              		.loc 3 15 30 is_stmt 0
 1354 03dc 83278503 		lw	a5,56(a0)
 1355              	.LVL88:
 1356              	.LBE106:
GAS LISTING /tmp/ccMC4ZM5.s 			page 38


 1357              	.LBE105:
 257:src/Riscv.cpp ****                 s = s | 2;
 1358              		.loc 1 257 17 is_stmt 1
 257:src/Riscv.cpp ****                 s = s | 2;
 1359              		.loc 1 257 19 is_stmt 0
 1360 03e0 93E72700 		ori	a5,a5,2
 1361              	.LVL89:
 258:src/Riscv.cpp ****                 TCB::running->setStatus(s);
 1362              		.loc 1 258 17 is_stmt 1
 1363              	.LBB107:
 1364              	.LBB108:
  11:src/../h/../h/../h/tcb.hpp ****     //s = 01 (1)blocked
 1365              		.loc 3 11 29
  11:src/../h/../h/../h/tcb.hpp ****     //s = 01 (1)blocked
 1366              		.loc 3 11 36 is_stmt 0
 1367 03e4 232CF502 		sw	a5,56(a0)
 1368              	.LVL90:
 1369              	.LBE108:
 1370              	.LBE107:
 259:src/Riscv.cpp ****                 sleepList::add(TCB::running, time);
 1371              		.loc 1 259 17 is_stmt 1
 259:src/Riscv.cpp ****                 sleepList::add(TCB::running, time);
 1372              		.loc 1 259 31 is_stmt 0
 1373 03e8 97000000 		call	_ZN9sleepList3addEP3TCBm@plt
 1373      E7800000 
 1374              	.LVL91:
 260:src/Riscv.cpp ****                 thread_dispatch();
 1375              		.loc 1 260 17 is_stmt 1
 260:src/Riscv.cpp ****                 thread_dispatch();
 1376              		.loc 1 260 32 is_stmt 0
 1377 03f0 97000000 		call	_Z15thread_dispatchv@plt
 1377      E7800000 
 1378              	.LVL92:
 261:src/Riscv.cpp ****                 ret = 0;
 1379              		.loc 1 261 17 is_stmt 1
 1380              	.LBE104:
 1381 03f8 6FF0DFFC 		j	.L32
 1382              	.LVL93:
 1383              	.L49:
 1384              	.LBE103:
 1385              	.LBE109:
 1386              	.LBE110:
 1387              	.LBB111:
 1388              	.LBB99:
 272:src/Riscv.cpp ****             char c = Cconsole::getChIn();
 1389              		.loc 1 272 13
 272:src/Riscv.cpp ****             char c = Cconsole::getChIn();
 1390              		.loc 1 272 39 is_stmt 0
 1391 03fc 97000000 		call	_ZN8Cconsole7getChInEv@plt
 1391      E7800000 
 1392              	.LVL94:
 273:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r"(c));
 1393              		.loc 1 273 13 is_stmt 1
 273:src/Riscv.cpp ****             __asm__ volatile("sd %0, 80(fp)" : : "r"(c));
 1394              		.loc 1 273 57 is_stmt 0
 1395              	#APP
 1396              	# 273 "src/Riscv.cpp" 1
GAS LISTING /tmp/ccMC4ZM5.s 			page 39


 1397              		sd a0, 80(fp)
 1398              	# 0 "" 2
 1399              	#NO_APP
 1400              	.LBE99:
 1401 0408 6FF05FE2 		j	.L13
 1402              	.LVL95:
 1403              	.L11:
 1404              	.LBE111:
 1405              	.LBE116:
 1406              	.LBE122:
 1407              	.LBE129:
 1408              	.LBE137:
 1409              	.LBE146:
 1410              	.LBE156:
 1411              	.LBE166:
 1412              	.LBE180:
 1413              	.LBE193:
 1414              	.LBE207:
 1415              	.LBE222:
 1416              	.LBE242:
 1417              	.LBE258:
 297:src/Riscv.cpp ****         mprintString("\nunexpected trap cause: ");
 1418              		.loc 1 297 9 is_stmt 1
 297:src/Riscv.cpp ****         mprintString("\nunexpected trap cause: ");
 1419              		.loc 1 297 21 is_stmt 0
 1420 040c 17050000 		lla	a0,.LC0
 1420      13050500 
 1421 0414 97000000 		call	_Z12mprintStringPKc@plt
 1421      E7800000 
 1422              	.LVL96:
 298:src/Riscv.cpp ****         printInteger(scauseReg);
 1423              		.loc 1 298 9 is_stmt 1
 298:src/Riscv.cpp ****         printInteger(scauseReg);
 1424              		.loc 1 298 21 is_stmt 0
 1425 041c 13850400 		mv	a0,s1
 1426 0420 97000000 		call	_Z12printIntegerm@plt
 1426      E7800000 
 1427              	.LVL97:
 299:src/Riscv.cpp ****         mprintString("\n");
 1428              		.loc 1 299 9 is_stmt 1
 299:src/Riscv.cpp ****         mprintString("\n");
 1429              		.loc 1 299 21 is_stmt 0
 1430 0428 17050000 		lla	a0,.LC1
 1430      13050500 
 1431 0430 97000000 		call	_Z12mprintStringPKc@plt
 1431      E7800000 
 1432              	.LVL98:
 300:src/Riscv.cpp ****         thread_dispatch();
 1433              		.loc 1 300 9 is_stmt 1
 300:src/Riscv.cpp ****         thread_dispatch();
 1434              		.loc 1 300 24 is_stmt 0
 1435 0438 97000000 		call	_Z15thread_dispatchv@plt
 1435      E7800000 
 1436              	.LVL99:
 301:src/Riscv.cpp ****         __asm__ volatile("li a0,0x5555");
 1437              		.loc 1 301 9 is_stmt 1
 301:src/Riscv.cpp ****         __asm__ volatile("li a0,0x5555");
GAS LISTING /tmp/ccMC4ZM5.s 			page 40


 1438              		.loc 1 301 41 is_stmt 0
 1439              	#APP
 1440              	# 301 "src/Riscv.cpp" 1
 302:src/Riscv.cpp ****         __asm__ volatile("li a1,0x100000");
 1441              		li a0,0x5555
 1442              	# 0 "" 2
 1443              		.loc 1 302 9 is_stmt 1
 302:src/Riscv.cpp ****         __asm__ volatile("li a1,0x100000");
 1444              		.loc 1 302 43 is_stmt 0
 1445              	# 302 "src/Riscv.cpp" 1
 303:src/Riscv.cpp ****         __asm__ volatile("sw a0, 0(a1)");
 1446              		li a1,0x100000
 1447              	# 0 "" 2
 1448              		.loc 1 303 9 is_stmt 1
 303:src/Riscv.cpp ****         __asm__ volatile("sw a0, 0(a1)");
 1449              		.loc 1 303 41 is_stmt 0
 1450              	# 303 "src/Riscv.cpp" 1
 1451              		sw a0, 0(a1)
 1452              	# 0 "" 2
 1453              	#NO_APP
 1454              	.LBE283:
 1455              	.LBE313:
 1456              	.LBE330:
 1457              		.loc 1 305 1
 1458 0450 6FF0DFDE 		j	.L3
 1459              		.cfi_endproc
 1460              	.LFE45:
 1462              	.Letext0:
 1463              		.file 4 "src/../h/../lib/hw.h"
 1464              		.file 5 "src/../h/../h/../h/list.hpp"
 1465              		.file 6 "src/../h/../h/../h/../h/MemAllocator.hpp"
 1466              		.file 7 "src/../h/../h/../h/semaphore.hpp"
 1467              		.file 8 "src/../h/../h/bufer.hpp"
 1468              		.file 9 "src/../h/cconsole.hpp"
 1469              		.file 10 "src/../h/sleepList.hpp"
 1470              		.file 11 "src/../h/../h/../h/syscall_c.h"
 1471              		.file 12 "src/../h/../h/../h/../h/print.hpp"
GAS LISTING /tmp/ccMC4ZM5.s 			page 41


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccMC4ZM5.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccMC4ZM5.s:13     .text:0000000000000000 .L0 
     /tmp/ccMC4ZM5.s:14     .text:0000000000000000 .L0 
     /tmp/ccMC4ZM5.s:15     .text:0000000000000004 .L0 
     /tmp/ccMC4ZM5.s:17     .text:0000000000000008 .L0 
     /tmp/ccMC4ZM5.s:19     .text:000000000000000c .L0 
     /tmp/ccMC4ZM5.s:21     .text:000000000000000c .L0 
       src/Riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccMC4ZM5.s:27     .text:0000000000000010 .L0 
       src/Riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccMC4ZM5.s:33     .text:0000000000000014 .L0 
     /tmp/ccMC4ZM5.s:34     .text:0000000000000018 .L0 
     /tmp/ccMC4ZM5.s:35     .text:0000000000000018 .L0 
     /tmp/ccMC4ZM5.s:37     .text:000000000000001c .L0 
     /tmp/ccMC4ZM5.s:39     .text:0000000000000020 .L0 
     /tmp/ccMC4ZM5.s:53     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccMC4ZM5.s:56     .text:0000000000000020 .L0 
     /tmp/ccMC4ZM5.s:57     .text:0000000000000020 .L0 
     /tmp/ccMC4ZM5.s:58     .text:0000000000000024 .L0 
     /tmp/ccMC4ZM5.s:62     .text:0000000000000030 .L0 
     /tmp/ccMC4ZM5.s:63     .text:0000000000000030 .L0 
     /tmp/ccMC4ZM5.s:64     .text:0000000000000030 .L0 
     /tmp/ccMC4ZM5.s:66     .text:0000000000000034 .L0 
     /tmp/ccMC4ZM5.s:71     .text:0000000000000034 .L0 
     /tmp/ccMC4ZM5.s:72     .text:0000000000000034 .L0 
     /tmp/ccMC4ZM5.s:73     .text:0000000000000034 .L0 
  src/../h/Riscv.hpp:92     .text:0000000000000034 .L0 
     /tmp/ccMC4ZM5.s:81     .text:000000000000003c .L0 
     /tmp/ccMC4ZM5.s:82     .text:000000000000003c .L0 
     /tmp/ccMC4ZM5.s:88     .text:0000000000000040 .L0 
     /tmp/ccMC4ZM5.s:96     .text:0000000000000050 .L0 
     /tmp/ccMC4ZM5.s:106    .text:0000000000000060 .L0 
     /tmp/ccMC4ZM5.s:107    .text:0000000000000060 .L0 
     /tmp/ccMC4ZM5.s:109    .text:0000000000000064 .L0 
     /tmp/ccMC4ZM5.s:115    .text:000000000000006c .L0 
     /tmp/ccMC4ZM5.s:116    .text:000000000000006c .L0 
     /tmp/ccMC4ZM5.s:117    .text:000000000000006c .L0 
  src/../h/Riscv.hpp:104    .text:000000000000006c .L0 
     /tmp/ccMC4ZM5.s:125    .text:0000000000000074 .L0 
     /tmp/ccMC4ZM5.s:126    .text:0000000000000074 .L0 
     /tmp/ccMC4ZM5.s:130    .text:0000000000000078 .L0 
     /tmp/ccMC4ZM5.s:132    .text:000000000000007c .L0 
     /tmp/ccMC4ZM5.s:136    .text:0000000000000080 .L0 
     /tmp/ccMC4ZM5.s:137    .text:0000000000000080 .L0 
     /tmp/ccMC4ZM5.s:138    .text:0000000000000080 .L0 
  src/../h/Riscv.hpp:172    .text:0000000000000080 .L0 
     /tmp/ccMC4ZM5.s:146    .text:0000000000000088 .L0 
     /tmp/ccMC4ZM5.s:147    .text:0000000000000088 .L0 
     /tmp/ccMC4ZM5.s:151    .text:000000000000008c .L0 
     /tmp/ccMC4ZM5.s:153    .text:0000000000000090 .L0 
     /tmp/ccMC4ZM5.s:154    .text:0000000000000090 .L0 
       src/Riscv.cpp:63     .text:0000000000000090 .L0 
     /tmp/ccMC4ZM5.s:163    .text:0000000000000094 .L0 
     /tmp/ccMC4ZM5.s:176    .text:0000000000000098 .L0 
     /tmp/ccMC4ZM5.s:192    .text:00000000000000a0 .L0 
GAS LISTING /tmp/ccMC4ZM5.s 			page 42


     /tmp/ccMC4ZM5.s:210    .text:00000000000000a8 .L0 
     /tmp/ccMC4ZM5.s:230    .text:00000000000000b0 .L0 
     /tmp/ccMC4ZM5.s:252    .text:00000000000000b8 .L0 
     /tmp/ccMC4ZM5.s:276    .text:00000000000000c0 .L0 
     /tmp/ccMC4ZM5.s:302    .text:00000000000000c8 .L0 
     /tmp/ccMC4ZM5.s:330    .text:00000000000000d0 .L0 
     /tmp/ccMC4ZM5.s:360    .text:00000000000000d8 .L0 
     /tmp/ccMC4ZM5.s:392    .text:00000000000000e0 .L0 
     /tmp/ccMC4ZM5.s:426    .text:00000000000000e8 .L0 
     /tmp/ccMC4ZM5.s:462    .text:00000000000000f0 .L0 
     /tmp/ccMC4ZM5.s:500    .text:00000000000000f8 .L0 
     /tmp/ccMC4ZM5.s:504    .text:0000000000000100 .L0 
     /tmp/ccMC4ZM5.s:505    .text:0000000000000100 .L0 
     /tmp/ccMC4ZM5.s:506    .text:0000000000000100 .L0 
       src/Riscv.cpp:280    .text:0000000000000100 .L0 
     /tmp/ccMC4ZM5.s:513    .text:0000000000000104 .L0 
     /tmp/ccMC4ZM5.s:514    .text:0000000000000104 .L0 
     /tmp/ccMC4ZM5.s:516    .text:0000000000000104 .L0 
     /tmp/ccMC4ZM5.s:544    .text:0000000000000114 .L0 
     /tmp/ccMC4ZM5.s:545    .text:0000000000000114 .L0 
     /tmp/ccMC4ZM5.s:546    .text:0000000000000114 .L0 
  src/../h/Riscv.hpp:104    .text:0000000000000114 .L0 
     /tmp/ccMC4ZM5.s:554    .text:000000000000011c .L0 
     /tmp/ccMC4ZM5.s:555    .text:000000000000011c .L0 
     /tmp/ccMC4ZM5.s:559    .text:0000000000000120 .L0 
     /tmp/ccMC4ZM5.s:563    .text:0000000000000124 .L0 
     /tmp/ccMC4ZM5.s:564    .text:0000000000000124 .L0 
     /tmp/ccMC4ZM5.s:565    .text:0000000000000124 .L0 
  src/../h/Riscv.hpp:172    .text:0000000000000124 .L0 
     /tmp/ccMC4ZM5.s:573    .text:000000000000012c .L0 
     /tmp/ccMC4ZM5.s:574    .text:000000000000012c .L0 
     /tmp/ccMC4ZM5.s:578    .text:0000000000000130 .L0 
     /tmp/ccMC4ZM5.s:583    .text:0000000000000134 .L0 
     /tmp/ccMC4ZM5.s:584    .text:0000000000000134 .L0 
     /tmp/ccMC4ZM5.s:585    .text:0000000000000134 .L0 
     /tmp/ccMC4ZM5.s:595    .text:000000000000013c .L0 
     /tmp/ccMC4ZM5.s:596    .text:000000000000013c .L0 
     /tmp/ccMC4ZM5.s:599    .text:0000000000000144 .L0 
     /tmp/ccMC4ZM5.s:600    .text:0000000000000144 .L0 
     /tmp/ccMC4ZM5.s:603    .text:000000000000014c .L0 
     /tmp/ccMC4ZM5.s:604    .text:000000000000014c .L0 
     /tmp/ccMC4ZM5.s:609    .text:0000000000000160 .L0 
     /tmp/ccMC4ZM5.s:610    .text:0000000000000160 .L0 
     /tmp/ccMC4ZM5.s:617    .text:000000000000016c .L0 
     /tmp/ccMC4ZM5.s:618    .text:000000000000016c .L0 
     /tmp/ccMC4ZM5.s:623    .text:0000000000000170 .L0 
     /tmp/ccMC4ZM5.s:626    .text:0000000000000174 .L0 
     /tmp/ccMC4ZM5.s:627    .text:0000000000000174 .L0 
     /tmp/ccMC4ZM5.s:632    .text:0000000000000178 .L0 
  src/../h/Riscv.hpp:178    .text:0000000000000178 .L0 
     /tmp/ccMC4ZM5.s:642    .text:000000000000017c .L0 
     /tmp/ccMC4ZM5.s:643    .text:000000000000017c .L0 
     /tmp/ccMC4ZM5.s:648    .text:0000000000000180 .L0 
  src/../h/Riscv.hpp:110    .text:0000000000000180 .L0 
     /tmp/ccMC4ZM5.s:655    .text:0000000000000184 .L0 
     /tmp/ccMC4ZM5.s:661    .text:0000000000000188 .L0 
     /tmp/ccMC4ZM5.s:662    .text:0000000000000188 .L0 
GAS LISTING /tmp/ccMC4ZM5.s 			page 43


     /tmp/ccMC4ZM5.s:672    .text:0000000000000194 .L0 
     /tmp/ccMC4ZM5.s:673    .text:0000000000000194 .L0 
     /tmp/ccMC4ZM5.s:674    .text:0000000000000194 .L0 
  src/../h/Riscv.hpp:104    .text:0000000000000194 .L0 
     /tmp/ccMC4ZM5.s:682    .text:000000000000019c .L0 
     /tmp/ccMC4ZM5.s:683    .text:000000000000019c .L0 
     /tmp/ccMC4ZM5.s:687    .text:00000000000001a0 .L0 
     /tmp/ccMC4ZM5.s:691    .text:00000000000001a4 .L0 
     /tmp/ccMC4ZM5.s:692    .text:00000000000001a4 .L0 
     /tmp/ccMC4ZM5.s:693    .text:00000000000001a4 .L0 
  src/../h/Riscv.hpp:172    .text:00000000000001a4 .L0 
     /tmp/ccMC4ZM5.s:701    .text:00000000000001ac .L0 
     /tmp/ccMC4ZM5.s:702    .text:00000000000001ac .L0 
     /tmp/ccMC4ZM5.s:706    .text:00000000000001b0 .L0 
     /tmp/ccMC4ZM5.s:708    .text:00000000000001b4 .L0 
     /tmp/ccMC4ZM5.s:709    .text:00000000000001b4 .L0 
     /tmp/ccMC4ZM5.s:712    .text:00000000000001bc .L0 
     /tmp/ccMC4ZM5.s:716    .text:00000000000001c4 .L0 
     /tmp/ccMC4ZM5.s:717    .text:00000000000001c4 .L0 
     /tmp/ccMC4ZM5.s:722    .text:00000000000001c8 .L0 
  src/../h/Riscv.hpp:110    .text:00000000000001c8 .L0 
     /tmp/ccMC4ZM5.s:732    .text:00000000000001cc .L0 
     /tmp/ccMC4ZM5.s:733    .text:00000000000001cc .L0 
     /tmp/ccMC4ZM5.s:738    .text:00000000000001d0 .L0 
  src/../h/Riscv.hpp:178    .text:00000000000001d0 .L0 
     /tmp/ccMC4ZM5.s:745    .text:00000000000001d4 .L0 
     /tmp/ccMC4ZM5.s:751    .text:00000000000001d8 .L0 
     /tmp/ccMC4ZM5.s:752    .text:00000000000001d8 .L0 
     /tmp/ccMC4ZM5.s:753    .text:00000000000001d8 .L0 
     /tmp/ccMC4ZM5.s:757    .text:00000000000001e8 .L0 
     /tmp/ccMC4ZM5.s:760    .text:00000000000001f0 .L0 
     /tmp/ccMC4ZM5.s:761    .text:00000000000001f0 .L0 
     /tmp/ccMC4ZM5.s:767    .text:0000000000000208 .L0 
     /tmp/ccMC4ZM5.s:770    .text:000000000000020c .L0 
     /tmp/ccMC4ZM5.s:771    .text:000000000000020c .L0 
     /tmp/ccMC4ZM5.s:783    .text:000000000000021c .L0 
     /tmp/ccMC4ZM5.s:784    .text:000000000000021c .L0 
     /tmp/ccMC4ZM5.s:785    .text:000000000000021c .L0 
       src/Riscv.cpp:69     .text:000000000000021c .L0 
     /tmp/ccMC4ZM5.s:792    .text:0000000000000220 .L0 
     /tmp/ccMC4ZM5.s:793    .text:0000000000000220 .L0 
     /tmp/ccMC4ZM5.s:795    .text:0000000000000220 .L0 
     /tmp/ccMC4ZM5.s:798    .text:0000000000000228 .L0 
     /tmp/ccMC4ZM5.s:799    .text:0000000000000228 .L0 
       src/Riscv.cpp:73     .text:0000000000000228 .L0 
     /tmp/ccMC4ZM5.s:810    .text:000000000000022c .L0 
     /tmp/ccMC4ZM5.s:811    .text:000000000000022c .L0 
     /tmp/ccMC4ZM5.s:816    .text:0000000000000230 .L0 
  src/../h/Riscv.hpp:178    .text:0000000000000230 .L0 
     /tmp/ccMC4ZM5.s:826    .text:0000000000000234 .L0 
     /tmp/ccMC4ZM5.s:827    .text:0000000000000234 .L0 
     /tmp/ccMC4ZM5.s:832    .text:0000000000000238 .L0 
  src/../h/Riscv.hpp:110    .text:0000000000000238 .L0 
     /tmp/ccMC4ZM5.s:847    .text:000000000000023c .L0 
     /tmp/ccMC4ZM5.s:848    .text:0000000000000240 .L0 
     /tmp/ccMC4ZM5.s:849    .text:0000000000000240 .L0 
     /tmp/ccMC4ZM5.s:851    .text:0000000000000244 .L0 
GAS LISTING /tmp/ccMC4ZM5.s 			page 44


     /tmp/ccMC4ZM5.s:852    .text:0000000000000244 .L0 
     /tmp/ccMC4ZM5.s:854    .text:0000000000000248 .L0 
     /tmp/ccMC4ZM5.s:856    .text:000000000000024c .L0 
     /tmp/ccMC4ZM5.s:860    .text:0000000000000250 .L0 
     /tmp/ccMC4ZM5.s:869    .text:0000000000000250 .L0 
     /tmp/ccMC4ZM5.s:870    .text:0000000000000250 .L0 
     /tmp/ccMC4ZM5.s:871    .text:0000000000000250 .L0 
       src/Riscv.cpp:80     .text:0000000000000250 .L0 
     /tmp/ccMC4ZM5.s:878    .text:0000000000000254 .L0 
     /tmp/ccMC4ZM5.s:879    .text:0000000000000254 .L0 
     /tmp/ccMC4ZM5.s:881    .text:0000000000000254 .L0 
     /tmp/ccMC4ZM5.s:884    .text:000000000000025c .L0 
       src/Riscv.cpp:83     .text:000000000000025c .L0 
     /tmp/ccMC4ZM5.s:897    .text:0000000000000264 .L0 
     /tmp/ccMC4ZM5.s:898    .text:0000000000000264 .L0 
     /tmp/ccMC4ZM5.s:899    .text:0000000000000264 .L0 
     /tmp/ccMC4ZM5.s:900    .text:0000000000000264 .L0 
       src/Riscv.cpp:93     .text:0000000000000264 .L0 
     /tmp/ccMC4ZM5.s:907    .text:0000000000000268 .L0 
       src/Riscv.cpp:94     .text:0000000000000268 .L0 
     /tmp/ccMC4ZM5.s:913    .text:000000000000026c .L0 
       src/Riscv.cpp:95     .text:000000000000026c .L0 
     /tmp/ccMC4ZM5.s:919    .text:0000000000000270 .L0 
     /tmp/ccMC4ZM5.s:921    .text:0000000000000270 .L0 
     /tmp/ccMC4ZM5.s:925    .text:000000000000027c .L0 
     /tmp/ccMC4ZM5.s:928    .text:0000000000000280 .L0 
     /tmp/ccMC4ZM5.s:929    .text:0000000000000280 .L0 
     /tmp/ccMC4ZM5.s:932    .text:0000000000000284 .L0 
     /tmp/ccMC4ZM5.s:933    .text:0000000000000284 .L0 
     /tmp/ccMC4ZM5.s:934    .text:0000000000000284 .L0 
     /tmp/ccMC4ZM5.s:944    .text:0000000000000290 .L0 
     /tmp/ccMC4ZM5.s:945    .text:0000000000000290 .L0 
     /tmp/ccMC4ZM5.s:958    .text:000000000000029c .L0 
     /tmp/ccMC4ZM5.s:959    .text:000000000000029c .L0 
     /tmp/ccMC4ZM5.s:966    .text:00000000000002a8 .L0 
     /tmp/ccMC4ZM5.s:967    .text:00000000000002a8 .L0 
     /tmp/ccMC4ZM5.s:973    .text:00000000000002b0 .L0 
     /tmp/ccMC4ZM5.s:974    .text:00000000000002b0 .L0 
     /tmp/ccMC4ZM5.s:977    .text:00000000000002b8 .L0 
     /tmp/ccMC4ZM5.s:978    .text:00000000000002b8 .L0 
     /tmp/ccMC4ZM5.s:979    .text:00000000000002b8 .L0 
     /tmp/ccMC4ZM5.s:991    .text:00000000000002c4 .L0 
     /tmp/ccMC4ZM5.s:992    .text:00000000000002c4 .L0 
     /tmp/ccMC4ZM5.s:1000   .text:00000000000002d0 .L0 
     /tmp/ccMC4ZM5.s:1001   .text:00000000000002d0 .L0 
     /tmp/ccMC4ZM5.s:1002   .text:00000000000002d0 .L0 
     /tmp/ccMC4ZM5.s:1003   .text:00000000000002d0 .L0 
       src/Riscv.cpp:127    .text:00000000000002d0 .L0 
     /tmp/ccMC4ZM5.s:1010   .text:00000000000002d4 .L0 
       src/Riscv.cpp:128    .text:00000000000002d4 .L0 
     /tmp/ccMC4ZM5.s:1016   .text:00000000000002d8 .L0 
     /tmp/ccMC4ZM5.s:1017   .text:00000000000002d8 .L0 
     /tmp/ccMC4ZM5.s:1019   .text:00000000000002d8 .L0 
     /tmp/ccMC4ZM5.s:1023   .text:00000000000002e4 .L0 
     /tmp/ccMC4ZM5.s:1026   .text:00000000000002e8 .L0 
     /tmp/ccMC4ZM5.s:1027   .text:00000000000002e8 .L0 
     /tmp/ccMC4ZM5.s:1030   .text:00000000000002ec .L0 
GAS LISTING /tmp/ccMC4ZM5.s 			page 45


     /tmp/ccMC4ZM5.s:1031   .text:00000000000002ec .L0 
     /tmp/ccMC4ZM5.s:1032   .text:00000000000002ec .L0 
     /tmp/ccMC4ZM5.s:1042   .text:00000000000002f8 .L0 
     /tmp/ccMC4ZM5.s:1043   .text:00000000000002f8 .L0 
     /tmp/ccMC4ZM5.s:1056   .text:0000000000000304 .L0 
     /tmp/ccMC4ZM5.s:1057   .text:0000000000000304 .L0 
     /tmp/ccMC4ZM5.s:1058   .text:0000000000000304 .L0 
       src/Riscv.cpp:150    .text:0000000000000304 .L0 
     /tmp/ccMC4ZM5.s:1065   .text:0000000000000308 .L0 
     /tmp/ccMC4ZM5.s:1066   .text:0000000000000308 .L0 
     /tmp/ccMC4ZM5.s:1068   .text:0000000000000308 .L0 
     /tmp/ccMC4ZM5.s:1070   .text:000000000000030c .L0 
     /tmp/ccMC4ZM5.s:1071   .text:000000000000030c .L0 
     /tmp/ccMC4ZM5.s:1082   .text:0000000000000318 .L0 
     /tmp/ccMC4ZM5.s:1083   .text:0000000000000318 .L0 
     /tmp/ccMC4ZM5.s:1086   .text:0000000000000320 .L0 
       src/Riscv.cpp:161    .text:0000000000000320 .L0 
     /tmp/ccMC4ZM5.s:1099   .text:0000000000000328 .L0 
     /tmp/ccMC4ZM5.s:1100   .text:0000000000000328 .L0 
     /tmp/ccMC4ZM5.s:1101   .text:0000000000000328 .L0 
       src/Riscv.cpp:169    .text:0000000000000328 .L0 
     /tmp/ccMC4ZM5.s:1108   .text:000000000000032c .L0 
     /tmp/ccMC4ZM5.s:1109   .text:000000000000032c .L0 
     /tmp/ccMC4ZM5.s:1111   .text:000000000000032c .L0 
     /tmp/ccMC4ZM5.s:1113   .text:0000000000000330 .L0 
     /tmp/ccMC4ZM5.s:1114   .text:0000000000000330 .L0 
     /tmp/ccMC4ZM5.s:1125   .text:000000000000033c .L0 
     /tmp/ccMC4ZM5.s:1126   .text:000000000000033c .L0 
     /tmp/ccMC4ZM5.s:1129   .text:0000000000000344 .L0 
       src/Riscv.cpp:180    .text:0000000000000344 .L0 
     /tmp/ccMC4ZM5.s:1142   .text:000000000000034c .L0 
     /tmp/ccMC4ZM5.s:1143   .text:000000000000034c .L0 
       src/Riscv.cpp:188    .text:000000000000034c .L0 
     /tmp/ccMC4ZM5.s:1150   .text:0000000000000350 .L0 
     /tmp/ccMC4ZM5.s:1152   .text:0000000000000350 .L0 
     /tmp/ccMC4ZM5.s:1154   .text:0000000000000354 .L0 
     /tmp/ccMC4ZM5.s:1155   .text:0000000000000354 .L0 
     /tmp/ccMC4ZM5.s:1158   .text:000000000000035c .L0 
       src/Riscv.cpp:197    .text:000000000000035c .L0 
     /tmp/ccMC4ZM5.s:1168   .text:0000000000000364 .L0 
     /tmp/ccMC4ZM5.s:1169   .text:0000000000000364 .L0 
     /tmp/ccMC4ZM5.s:1183   .text:0000000000000370 .L0 
     /tmp/ccMC4ZM5.s:1184   .text:0000000000000370 .L0 
     /tmp/ccMC4ZM5.s:1185   .text:0000000000000370 .L0 
     /tmp/ccMC4ZM5.s:1186   .text:0000000000000370 .L0 
     /tmp/ccMC4ZM5.s:1187   .text:0000000000000370 .L0 
       src/Riscv.cpp:207    .text:0000000000000370 .L0 
     /tmp/ccMC4ZM5.s:1194   .text:0000000000000374 .L0 
       src/Riscv.cpp:208    .text:0000000000000374 .L0 
     /tmp/ccMC4ZM5.s:1200   .text:0000000000000378 .L0 
     /tmp/ccMC4ZM5.s:1201   .text:0000000000000378 .L0 
     /tmp/ccMC4ZM5.s:1202   .text:0000000000000378 .L0 
     /tmp/ccMC4ZM5.s:1204   .text:0000000000000378 .L0 
     /tmp/ccMC4ZM5.s:1206   .text:000000000000037c .L0 
     /tmp/ccMC4ZM5.s:1207   .text:000000000000037c .L0 
     /tmp/ccMC4ZM5.s:1218   .text:0000000000000388 .L0 
     /tmp/ccMC4ZM5.s:1219   .text:0000000000000388 .L0 
GAS LISTING /tmp/ccMC4ZM5.s 			page 46


     /tmp/ccMC4ZM5.s:1222   .text:0000000000000390 .L0 
       src/Riscv.cpp:220    .text:0000000000000390 .L0 
     /tmp/ccMC4ZM5.s:1235   .text:0000000000000398 .L0 
     /tmp/ccMC4ZM5.s:1236   .text:0000000000000398 .L0 
     /tmp/ccMC4ZM5.s:1237   .text:0000000000000398 .L0 
       src/Riscv.cpp:228    .text:0000000000000398 .L0 
     /tmp/ccMC4ZM5.s:1244   .text:000000000000039c .L0 
     /tmp/ccMC4ZM5.s:1245   .text:000000000000039c .L0 
     /tmp/ccMC4ZM5.s:1247   .text:000000000000039c .L0 
     /tmp/ccMC4ZM5.s:1249   .text:00000000000003a0 .L0 
     /tmp/ccMC4ZM5.s:1250   .text:00000000000003a0 .L0 
     /tmp/ccMC4ZM5.s:1261   .text:00000000000003ac .L0 
     /tmp/ccMC4ZM5.s:1262   .text:00000000000003ac .L0 
     /tmp/ccMC4ZM5.s:1265   .text:00000000000003b4 .L0 
       src/Riscv.cpp:239    .text:00000000000003b4 .L0 
     /tmp/ccMC4ZM5.s:1278   .text:00000000000003bc .L0 
     /tmp/ccMC4ZM5.s:1279   .text:00000000000003bc .L0 
     /tmp/ccMC4ZM5.s:1280   .text:00000000000003bc .L0 
     /tmp/ccMC4ZM5.s:1281   .text:00000000000003bc .L0 
       src/Riscv.cpp:248    .text:00000000000003bc .L0 
     /tmp/ccMC4ZM5.s:1288   .text:00000000000003c0 .L0 
     /tmp/ccMC4ZM5.s:1291   .text:00000000000003c0 .L0 
     /tmp/ccMC4ZM5.s:1296   .text:00000000000003c4 .L0 
     /tmp/ccMC4ZM5.s:1297   .text:00000000000003c4 .L0 
     /tmp/ccMC4ZM5.s:1344   .text:00000000000003d0 .L0 
     /tmp/ccMC4ZM5.s:1345   .text:00000000000003d0 .L0 
     /tmp/ccMC4ZM5.s:1346   .text:00000000000003d0 .L0 
     /tmp/ccMC4ZM5.s:1353   .text:00000000000003dc .L0 
     /tmp/ccMC4ZM5.s:1354   .text:00000000000003dc .L0 
     /tmp/ccMC4ZM5.s:1359   .text:00000000000003e0 .L0 
     /tmp/ccMC4ZM5.s:1360   .text:00000000000003e0 .L0 
     /tmp/ccMC4ZM5.s:1365   .text:00000000000003e4 .L0 
     /tmp/ccMC4ZM5.s:1366   .text:00000000000003e4 .L0 
     /tmp/ccMC4ZM5.s:1367   .text:00000000000003e4 .L0 
     /tmp/ccMC4ZM5.s:1372   .text:00000000000003e8 .L0 
     /tmp/ccMC4ZM5.s:1373   .text:00000000000003e8 .L0 
     /tmp/ccMC4ZM5.s:1376   .text:00000000000003f0 .L0 
     /tmp/ccMC4ZM5.s:1377   .text:00000000000003f0 .L0 
     /tmp/ccMC4ZM5.s:1381   .text:00000000000003f8 .L0 
     /tmp/ccMC4ZM5.s:1390   .text:00000000000003fc .L0 
     /tmp/ccMC4ZM5.s:1391   .text:00000000000003fc .L0 
     /tmp/ccMC4ZM5.s:1394   .text:0000000000000404 .L0 
       src/Riscv.cpp:273    .text:0000000000000404 .L0 
     /tmp/ccMC4ZM5.s:1419   .text:000000000000040c .L0 
     /tmp/ccMC4ZM5.s:1420   .text:000000000000040c .L0 
     /tmp/ccMC4ZM5.s:1424   .text:000000000000041c .L0 
     /tmp/ccMC4ZM5.s:1425   .text:000000000000041c .L0 
     /tmp/ccMC4ZM5.s:1429   .text:0000000000000428 .L0 
     /tmp/ccMC4ZM5.s:1430   .text:0000000000000428 .L0 
     /tmp/ccMC4ZM5.s:1434   .text:0000000000000438 .L0 
     /tmp/ccMC4ZM5.s:1435   .text:0000000000000438 .L0 
     /tmp/ccMC4ZM5.s:1438   .text:0000000000000440 .L0 
       src/Riscv.cpp:301    .text:0000000000000440 .L0 
     /tmp/ccMC4ZM5.s:1444   .text:0000000000000448 .L0 
       src/Riscv.cpp:302    .text:0000000000000448 .L0 
     /tmp/ccMC4ZM5.s:1449   .text:000000000000044c .L0 
       src/Riscv.cpp:303    .text:000000000000044c .L0 
GAS LISTING /tmp/ccMC4ZM5.s 			page 47


     /tmp/ccMC4ZM5.s:1458   .text:0000000000000450 .L0 
     /tmp/ccMC4ZM5.s:1459   .text:0000000000000454 .L0 
     /tmp/ccMC4ZM5.s:1472   .text:0000000000000454 .L0 
     /tmp/ccMC4ZM5.s:604    .text:000000000000014c .L0 
     /tmp/ccMC4ZM5.s:610    .text:0000000000000160 .L0 
     /tmp/ccMC4ZM5.s:753    .text:00000000000001d8 .L0 
     /tmp/ccMC4ZM5.s:761    .text:00000000000001f0 .L0 
     /tmp/ccMC4ZM5.s:959    .text:000000000000029c .L0 
     /tmp/ccMC4ZM5.s:1346   .text:00000000000003d0 .L0 
     /tmp/ccMC4ZM5.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccMC4ZM5.s:1420   .text:000000000000040c .L0 
     /tmp/ccMC4ZM5.s:47     .rodata.str1.8:0000000000000020 .LC1
     /tmp/ccMC4ZM5.s:1430   .text:0000000000000428 .L0 
     /tmp/ccMC4ZM5.s:522    .text:0000000000000114 .L35
     /tmp/ccMC4ZM5.s:665    .text:0000000000000194 .L36
     /tmp/ccMC4ZM5.s:1403   .text:000000000000040c .L11
     /tmp/ccMC4ZM5.s:776    .text:000000000000021c .L37
     /tmp/ccMC4ZM5.s:859    .text:0000000000000250 .L38
     /tmp/ccMC4ZM5.s:893    .text:0000000000000264 .L39
     /tmp/ccMC4ZM5.s:953    .text:000000000000029c .L40
     /tmp/ccMC4ZM5.s:988    .text:00000000000002c4 .L41
     /tmp/ccMC4ZM5.s:996    .text:00000000000002d0 .L42
     /tmp/ccMC4ZM5.s:1051   .text:0000000000000304 .L43
     /tmp/ccMC4ZM5.s:1094   .text:0000000000000328 .L44
     /tmp/ccMC4ZM5.s:1137   .text:000000000000034c .L45
     /tmp/ccMC4ZM5.s:1178   .text:0000000000000370 .L46
     /tmp/ccMC4ZM5.s:1230   .text:0000000000000398 .L47
     /tmp/ccMC4ZM5.s:1273   .text:00000000000003bc .L48
     /tmp/ccMC4ZM5.s:1383   .text:00000000000003fc .L49
     /tmp/ccMC4ZM5.s:806    .text:000000000000022c .L13
     /tmp/ccMC4ZM5.s:657    .text:0000000000000188 .L50
     /tmp/ccMC4ZM5.s:839    .text:000000000000023c .L3
     /tmp/ccMC4ZM5.s:624    .text:0000000000000174 .L5
     /tmp/ccMC4ZM5.s:747    .text:00000000000001d8 .L10
     /tmp/ccMC4ZM5.s:768    .text:000000000000020c .L9
     /tmp/ccMC4ZM5.s:714    .text:00000000000001c4 .L8
     /tmp/ccMC4ZM5.s:942    .text:0000000000000290 .L51
     /tmp/ccMC4ZM5.s:1040   .text:00000000000002f8 .L52
     /tmp/ccMC4ZM5.s:1080   .text:0000000000000318 .L22
     /tmp/ccMC4ZM5.s:1123   .text:000000000000033c .L24
     /tmp/ccMC4ZM5.s:1166   .text:0000000000000364 .L53
     /tmp/ccMC4ZM5.s:1216   .text:0000000000000388 .L28
     /tmp/ccMC4ZM5.s:1259   .text:00000000000003ac .L30
     /tmp/ccMC4ZM5.s:1306   .text:00000000000003d0 .L54
     /tmp/ccMC4ZM5.s:1293   .text:00000000000003c4 .L32
     /tmp/ccMC4ZM5.s:3798   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccMC4ZM5.s:5855   .debug_str:0000000000000a2d .LASF212
     /tmp/ccMC4ZM5.s:5565   .debug_str:00000000000001e4 .LASF213
     /tmp/ccMC4ZM5.s:5865   .debug_str:0000000000000b27 .LASF214
     /tmp/ccMC4ZM5.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccMC4ZM5.s:1462   .text:0000000000000454 .Letext0
     /tmp/ccMC4ZM5.s:5499   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccMC4ZM5.s:5639   .debug_str:0000000000000425 .LASF0
     /tmp/ccMC4ZM5.s:5667   .debug_str:00000000000004f1 .LASF1
     /tmp/ccMC4ZM5.s:5779   .debug_str:0000000000000816 .LASF2
     /tmp/ccMC4ZM5.s:5789   .debug_str:0000000000000867 .LASF4
     /tmp/ccMC4ZM5.s:5645   .debug_str:000000000000044c .LASF3
GAS LISTING /tmp/ccMC4ZM5.s 			page 48


     /tmp/ccMC4ZM5.s:5521   .debug_str:00000000000000af .LASF5
     /tmp/ccMC4ZM5.s:5747   .debug_str:0000000000000725 .LASF6
     /tmp/ccMC4ZM5.s:5733   .debug_str:00000000000006b1 .LASF7
     /tmp/ccMC4ZM5.s:5657   .debug_str:00000000000004b4 .LASF8
     /tmp/ccMC4ZM5.s:5617   .debug_str:0000000000000376 .LASF9
     /tmp/ccMC4ZM5.s:5621   .debug_str:00000000000003a2 .LASF10
     /tmp/ccMC4ZM5.s:5553   .debug_str:0000000000000197 .LASF11
     /tmp/ccMC4ZM5.s:5611   .debug_str:000000000000034c .LASF12
     /tmp/ccMC4ZM5.s:5567   .debug_str:00000000000001f2 .LASF13
     /tmp/ccMC4ZM5.s:5551   .debug_str:0000000000000187 .LASF14
     /tmp/ccMC4ZM5.s:5835   .debug_str:00000000000009b8 .LASF15
     /tmp/ccMC4ZM5.s:5599   .debug_str:00000000000002ed .LASF16
     /tmp/ccMC4ZM5.s:5819   .debug_str:0000000000000936 .LASF17
     /tmp/ccMC4ZM5.s:5903   .debug_str:0000000000000c3f .LASF59
     /tmp/ccMC4ZM5.s:5763   .debug_str:00000000000007a2 .LASF215
     /tmp/ccMC4ZM5.s:5661   .debug_str:00000000000004da .LASF18
     /tmp/ccMC4ZM5.s:5593   .debug_str:00000000000002b7 .LASF19
     /tmp/ccMC4ZM5.s:5911   .debug_str:0000000000000c6d .LASF20
     /tmp/ccMC4ZM5.s:5627   .debug_str:00000000000003cf .LASF21
     /tmp/ccMC4ZM5.s:5635   .debug_str:00000000000003fb .LASF23
     /tmp/ccMC4ZM5.s:5881   .debug_str:0000000000000b97 .LASF22
     /tmp/ccMC4ZM5.s:5613   .debug_str:000000000000035b .LASF24
     /tmp/ccMC4ZM5.s:5879   .debug_str:0000000000000b8e .LASF25
     /tmp/ccMC4ZM5.s:5873   .debug_str:0000000000000b5d .LASF27
     /tmp/ccMC4ZM5.s:5775   .debug_str:0000000000000802 .LASF29
     /tmp/ccMC4ZM5.s:5723   .debug_str:0000000000000659 .LASF31
     /tmp/ccMC4ZM5.s:5755   .debug_str:0000000000000754 .LASF26
     /tmp/ccMC4ZM5.s:5759   .debug_str:000000000000077b .LASF28
     /tmp/ccMC4ZM5.s:5713   .debug_str:0000000000000617 .LASF30
     /tmp/ccMC4ZM5.s:5659   .debug_str:00000000000004c7 .LASF32
     /tmp/ccMC4ZM5.s:5919   .debug_str:0000000000000cae .LASF33
     /tmp/ccMC4ZM5.s:5859   .debug_str:0000000000000af6 .LASF34
     /tmp/ccMC4ZM5.s:5709   .debug_str:000000000000060a .LASF35
     /tmp/ccMC4ZM5.s:5721   .debug_str:0000000000000645 .LASF36
     /tmp/ccMC4ZM5.s:5677   .debug_str:000000000000053b .LASF37
     /tmp/ccMC4ZM5.s:5761   .debug_str:000000000000078e .LASF38
     /tmp/ccMC4ZM5.s:5935   .debug_str:0000000000000d46 .LASF39
     /tmp/ccMC4ZM5.s:5643   .debug_str:0000000000000438 .LASF40
     /tmp/ccMC4ZM5.s:5831   .debug_str:00000000000009a4 .LASF41
     /tmp/ccMC4ZM5.s:5793   .debug_str:0000000000000873 .LASF42
     /tmp/ccMC4ZM5.s:5795   .debug_str:0000000000000886 .LASF43
     /tmp/ccMC4ZM5.s:5561   .debug_str:00000000000001be .LASF44
     /tmp/ccMC4ZM5.s:5591   .debug_str:00000000000002b1 .LASF45
     /tmp/ccMC4ZM5.s:5631   .debug_str:00000000000003e0 .LASF46
     /tmp/ccMC4ZM5.s:5641   .debug_str:0000000000000432 .LASF47
     /tmp/ccMC4ZM5.s:5579   .debug_str:0000000000000235 .LASF48
     /tmp/ccMC4ZM5.s:5523   .debug_str:00000000000000b6 .LASF49
     /tmp/ccMC4ZM5.s:5783   .debug_str:000000000000082e .LASF50
     /tmp/ccMC4ZM5.s:5777   .debug_str:000000000000080b .LASF51
     /tmp/ccMC4ZM5.s:5933   .debug_str:0000000000000d2e .LASF52
     /tmp/ccMC4ZM5.s:5907   .debug_str:0000000000000c5b .LASF53
     /tmp/ccMC4ZM5.s:5923   .debug_str:0000000000000cc1 .LASF54
     /tmp/ccMC4ZM5.s:5897   .debug_str:0000000000000c10 .LASF55
     /tmp/ccMC4ZM5.s:5695   .debug_str:00000000000005a3 .LASF56
     /tmp/ccMC4ZM5.s:5917   .debug_str:0000000000000c9f .LASF57
     /tmp/ccMC4ZM5.s:5619   .debug_str:0000000000000386 .LASF58
     /tmp/ccMC4ZM5.s:5739   .debug_str:00000000000006ec .LASF100
GAS LISTING /tmp/ccMC4ZM5.s 			page 49


     /tmp/ccMC4ZM5.s:5651   .debug_str:000000000000046f .LASF102
     /tmp/ccMC4ZM5.s:5735   .debug_str:00000000000006c4 .LASF60
     /tmp/ccMC4ZM5.s:5575   .debug_str:0000000000000222 .LASF175
     /tmp/ccMC4ZM5.s:5827   .debug_str:0000000000000984 .LASF61
     /tmp/ccMC4ZM5.s:5711   .debug_str:0000000000000612 .LASF62
     /tmp/ccMC4ZM5.s:5705   .debug_str:00000000000005ee .LASF63
     /tmp/ccMC4ZM5.s:5821   .debug_str:000000000000094c .LASF65
     /tmp/ccMC4ZM5.s:5609   .debug_str:0000000000000335 .LASF70
     /tmp/ccMC4ZM5.s:5781   .debug_str:0000000000000824 .LASF216
     /tmp/ccMC4ZM5.s:5769   .debug_str:00000000000007c4 .LASF217
     /tmp/ccMC4ZM5.s:5663   .debug_str:00000000000004e3 .LASF64
     /tmp/ccMC4ZM5.s:5541   .debug_str:0000000000000111 .LASF66
     /tmp/ccMC4ZM5.s:5681   .debug_str:000000000000054b .LASF67
     /tmp/ccMC4ZM5.s:5601   .debug_str:0000000000000303 .LASF68
     /tmp/ccMC4ZM5.s:5729   .debug_str:0000000000000687 .LASF69
     /tmp/ccMC4ZM5.s:5899   .debug_str:0000000000000c1a .LASF71
     /tmp/ccMC4ZM5.s:5939   .debug_str:0000000000000d58 .LASF72
     /tmp/ccMC4ZM5.s:5931   .debug_str:0000000000000d13 .LASF73
     /tmp/ccMC4ZM5.s:5803   .debug_str:00000000000008bc .LASF74
     /tmp/ccMC4ZM5.s:5655   .debug_str:0000000000000497 .LASF75
     /tmp/ccMC4ZM5.s:5745   .debug_str:000000000000071c .LASF76
     /tmp/ccMC4ZM5.s:5513   .debug_str:000000000000005c .LASF77
     /tmp/ccMC4ZM5.s:5839   .debug_str:00000000000009d1 .LASF111
     /tmp/ccMC4ZM5.s:5557   .debug_str:00000000000001ab .LASF78
     /tmp/ccMC4ZM5.s:5625   .debug_str:00000000000003bb .LASF79
     /tmp/ccMC4ZM5.s:5675   .debug_str:0000000000000530 .LASF80
     /tmp/ccMC4ZM5.s:5801   .debug_str:00000000000008a6 .LASF81
     /tmp/ccMC4ZM5.s:5791   .debug_str:000000000000086e .LASF82
     /tmp/ccMC4ZM5.s:5517   .debug_str:000000000000009e .LASF83
     /tmp/ccMC4ZM5.s:5841   .debug_str:00000000000009d9 .LASF84
     /tmp/ccMC4ZM5.s:5707   .debug_str:00000000000005f3 .LASF85
     /tmp/ccMC4ZM5.s:5537   .debug_str:00000000000000f7 .LASF86
     /tmp/ccMC4ZM5.s:5875   .debug_str:0000000000000b72 .LASF87
     /tmp/ccMC4ZM5.s:5671   .debug_str:000000000000050a .LASF88
     /tmp/ccMC4ZM5.s:5887   .debug_str:0000000000000bc3 .LASF89
     /tmp/ccMC4ZM5.s:5833   .debug_str:00000000000009ab .LASF90
     /tmp/ccMC4ZM5.s:5915   .debug_str:0000000000000c7d .LASF91
     /tmp/ccMC4ZM5.s:5725   .debug_str:000000000000066e .LASF218
     /tmp/ccMC4ZM5.s:5669   .debug_str:0000000000000504 .LASF92
     /tmp/ccMC4ZM5.s:5773   .debug_str:00000000000007f2 .LASF93
     /tmp/ccMC4ZM5.s:5853   .debug_str:0000000000000a25 .LASF219
     /tmp/ccMC4ZM5.s:5545   .debug_str:000000000000014e .LASF179
     /tmp/ccMC4ZM5.s:5509   .debug_str:0000000000000051 .LASF94
     /tmp/ccMC4ZM5.s:5811   .debug_str:0000000000000902 .LASF95
     /tmp/ccMC4ZM5.s:5871   .debug_str:0000000000000b55 .LASF96
     /tmp/ccMC4ZM5.s:5861   .debug_str:0000000000000b0a .LASF97
     /tmp/ccMC4ZM5.s:5817   .debug_str:000000000000092d .LASF98
     /tmp/ccMC4ZM5.s:5895   .debug_str:0000000000000c09 .LASF99
     /tmp/ccMC4ZM5.s:5539   .debug_str:0000000000000103 .LASF101
     /tmp/ccMC4ZM5.s:5673   .debug_str:0000000000000517 .LASF103
     /tmp/ccMC4ZM5.s:5577   .debug_str:0000000000000227 .LASF122
     /tmp/ccMC4ZM5.s:5515   .debug_str:0000000000000076 .LASF124
     /tmp/ccMC4ZM5.s:5585   .debug_str:0000000000000284 .LASF104
     /tmp/ccMC4ZM5.s:5563   .debug_str:00000000000001d1 .LASF105
     /tmp/ccMC4ZM5.s:5797   .debug_str:000000000000088d .LASF106
     /tmp/ccMC4ZM5.s:5727   .debug_str:0000000000000673 .LASF107
     /tmp/ccMC4ZM5.s:5787   .debug_str:000000000000085c .LASF108
GAS LISTING /tmp/ccMC4ZM5.s 			page 50


     /tmp/ccMC4ZM5.s:5921   .debug_str:0000000000000cb6 .LASF109
     /tmp/ccMC4ZM5.s:5837   .debug_str:00000000000009c4 .LASF110
     /tmp/ccMC4ZM5.s:5623   .debug_str:00000000000003b0 .LASF112
     /tmp/ccMC4ZM5.s:5665   .debug_str:00000000000004ec .LASF113
     /tmp/ccMC4ZM5.s:5555   .debug_str:00000000000001a6 .LASF114
     /tmp/ccMC4ZM5.s:5813   .debug_str:0000000000000908 .LASF115
     /tmp/ccMC4ZM5.s:5757   .debug_str:000000000000075b .LASF116
     /tmp/ccMC4ZM5.s:5697   .debug_str:00000000000005b9 .LASF117
     /tmp/ccMC4ZM5.s:5737   .debug_str:00000000000006ce .LASF118
     /tmp/ccMC4ZM5.s:5633   .debug_str:00000000000003f2 .LASF119
     /tmp/ccMC4ZM5.s:5809   .debug_str:00000000000008e4 .LASF120
     /tmp/ccMC4ZM5.s:5823   .debug_str:000000000000095f .LASF121
     /tmp/ccMC4ZM5.s:5573   .debug_str:0000000000000215 .LASF123
     /tmp/ccMC4ZM5.s:5581   .debug_str:0000000000000247 .LASF125
     /tmp/ccMC4ZM5.s:5687   .debug_str:0000000000000576 .LASF126
     /tmp/ccMC4ZM5.s:5883   .debug_str:0000000000000ba1 .LASF127
     /tmp/ccMC4ZM5.s:5845   .debug_str:00000000000009e9 .LASF128
     /tmp/ccMC4ZM5.s:5719   .debug_str:000000000000062d .LASF129
     /tmp/ccMC4ZM5.s:5525   .debug_str:00000000000000c1 .LASF130
     /tmp/ccMC4ZM5.s:5587   .debug_str:000000000000028d .LASF131
     /tmp/ccMC4ZM5.s:5653   .debug_str:0000000000000491 .LASF132
     /tmp/ccMC4ZM5.s:5905   .debug_str:0000000000000c45 .LASF133
     /tmp/ccMC4ZM5.s:5799   .debug_str:000000000000089e .LASF134
     /tmp/ccMC4ZM5.s:5683   .debug_str:0000000000000553 .LASF135
     /tmp/ccMC4ZM5.s:5501   .debug_str:0000000000000000 .LASF136
     /tmp/ccMC4ZM5.s:5891   .debug_str:0000000000000be5 .LASF137
     /tmp/ccMC4ZM5.s:5605   .debug_str:0000000000000324 .LASF138
     /tmp/ccMC4ZM5.s:5503   .debug_str:000000000000000e .LASF139
     /tmp/ccMC4ZM5.s:5535   .debug_str:00000000000000ee .LASF140
     /tmp/ccMC4ZM5.s:5549   .debug_str:000000000000016d .LASF141
     /tmp/ccMC4ZM5.s:5937   .debug_str:0000000000000d4e .LASF142
     /tmp/ccMC4ZM5.s:5815   .debug_str:0000000000000913 .LASF143
     /tmp/ccMC4ZM5.s:5849   .debug_str:00000000000009fb .LASF144
     /tmp/ccMC4ZM5.s:5629   .debug_str:00000000000003da .LASF145
     /tmp/ccMC4ZM5.s:5749   .debug_str:000000000000072c .LASF146
     /tmp/ccMC4ZM5.s:5901   .debug_str:0000000000000c38 .LASF147
     /tmp/ccMC4ZM5.s:5689   .debug_str:000000000000057b .LASF148
     /tmp/ccMC4ZM5.s:5569   .debug_str:0000000000000202 .LASF149
     /tmp/ccMC4ZM5.s:5913   .debug_str:0000000000000c76 .LASF150
     /tmp/ccMC4ZM5.s:5529   .debug_str:00000000000000ce .LASF151
     /tmp/ccMC4ZM5.s:5693   .debug_str:000000000000059d .LASF152
     /tmp/ccMC4ZM5.s:5807   .debug_str:00000000000008d2 .LASF153
     /tmp/ccMC4ZM5.s:5867   .debug_str:0000000000000b4a .LASF154
     /tmp/ccMC4ZM5.s:5637   .debug_str:0000000000000413 .LASF155
     /tmp/ccMC4ZM5.s:5767   .debug_str:00000000000007bd .LASF156
     /tmp/ccMC4ZM5.s:5863   .debug_str:0000000000000b14 .LASF157
     /tmp/ccMC4ZM5.s:5571   .debug_str:0000000000000210 .LASF158
     /tmp/ccMC4ZM5.s:5559   .debug_str:00000000000001b5 .LASF159
     /tmp/ccMC4ZM5.s:5547   .debug_str:0000000000000165 .LASF160
     /tmp/ccMC4ZM5.s:5889   .debug_str:0000000000000bdc .LASF161
     /tmp/ccMC4ZM5.s:5805   .debug_str:00000000000008c7 .LASF162
     /tmp/ccMC4ZM5.s:5829   .debug_str:0000000000000989 .LASF163
     /tmp/ccMC4ZM5.s:5679   .debug_str:0000000000000543 .LASF164
     /tmp/ccMC4ZM5.s:5927   .debug_str:0000000000000cf6 .LASF165
     /tmp/ccMC4ZM5.s:5701   .debug_str:00000000000005d8 .LASF166
     /tmp/ccMC4ZM5.s:5885   .debug_str:0000000000000bab .LASF167
     /tmp/ccMC4ZM5.s:5583   .debug_str:000000000000027c .LASF168
GAS LISTING /tmp/ccMC4ZM5.s 			page 51


     /tmp/ccMC4ZM5.s:5771   .debug_str:00000000000007db .LASF169
     /tmp/ccMC4ZM5.s:5647   .debug_str:000000000000045e .LASF170
     /tmp/ccMC4ZM5.s:5851   .debug_str:0000000000000a0d .LASF171
     /tmp/ccMC4ZM5.s:5519   .debug_str:00000000000000aa .LASF172
     /tmp/ccMC4ZM5.s:5843   .debug_str:00000000000009e4 .LASF173
     /tmp/ccMC4ZM5.s:5717   .debug_str:0000000000000623 .LASF174
     /tmp/ccMC4ZM5.s:5869   .debug_str:0000000000000b50 .LASF176
     /tmp/ccMC4ZM5.s:5877   .debug_str:0000000000000b89 .LASF177
     /tmp/ccMC4ZM5.s:5543   .debug_str:000000000000012e .LASF178
     /tmp/ccMC4ZM5.s:5751   .debug_str:0000000000000734 .LASF180
     /tmp/ccMC4ZM5.s:5929   .debug_str:0000000000000d0d .LASF181
     /tmp/ccMC4ZM5.s:5785   .debug_str:0000000000000846 .LASF182
     /tmp/ccMC4ZM5.s:5589   .debug_str:00000000000002a3 .LASF183
     /tmp/ccMC4ZM5.s:5925   .debug_str:0000000000000cd7 .LASF184
     /tmp/ccMC4ZM5.s:5825   .debug_str:0000000000000967 .LASF185
     /tmp/ccMC4ZM5.s:5595   .debug_str:00000000000002c0 .LASF186
     /tmp/ccMC4ZM5.s:5597   .debug_str:00000000000002ce .LASF187
     /tmp/ccMC4ZM5.s:5691   .debug_str:0000000000000581 .LASF188
     /tmp/ccMC4ZM5.s:5531   .debug_str:00000000000000dc .LASF189
     /tmp/ccMC4ZM5.s:5731   .debug_str:0000000000000693 .LASF190
     /tmp/ccMC4ZM5.s:54     .text:0000000000000020 .LFB45
     /tmp/ccMC4ZM5.s:1460   .text:0000000000000454 .LFE45
     /tmp/ccMC4ZM5.s:5847   .debug_str:00000000000009f1 .LASF191
     /tmp/ccMC4ZM5.s:4948   .debug_loc:0000000000000000 .LLST0
     /tmp/ccMC4ZM5.s:540    .text:0000000000000114 .LBB298
     /tmp/ccMC4ZM5.s:666    .text:0000000000000194 .LBE298
     /tmp/ccMC4ZM5.s:5857   .debug_str:0000000000000af1 .LASF192
     /tmp/ccMC4ZM5.s:5909   .debug_str:0000000000000c65 .LASF193
     /tmp/ccMC4ZM5.s:542    .text:0000000000000114 .LBB299
     /tmp/ccMC4ZM5.s:557    .text:0000000000000120 .LBE299
     /tmp/ccMC4ZM5.s:561    .text:0000000000000124 .LBB301
     /tmp/ccMC4ZM5.s:576    .text:0000000000000130 .LBE301
     /tmp/ccMC4ZM5.s:581    .text:0000000000000134 .LBB303
     /tmp/ccMC4ZM5.s:593    .text:000000000000013c .LBE303
     /tmp/ccMC4ZM5.s:4967   .debug_loc:000000000000005c .LLST50
     /tmp/ccMC4ZM5.s:613    .text:000000000000016c .LBB305
     /tmp/ccMC4ZM5.s:621    .text:0000000000000170 .LBE305
     /tmp/ccMC4ZM5.s:4975   .debug_loc:0000000000000080 .LLST51
     /tmp/ccMC4ZM5.s:629    .text:0000000000000178 .LBB307
     /tmp/ccMC4ZM5.s:640    .text:000000000000017c .LBE307
     /tmp/ccMC4ZM5.s:4982   .debug_loc:00000000000000a3 .LLST52
     /tmp/ccMC4ZM5.s:645    .text:0000000000000180 .LBB309
     /tmp/ccMC4ZM5.s:659    .text:0000000000000188 .LBE309
     /tmp/ccMC4ZM5.s:4989   .debug_loc:00000000000000c6 .LLST53
     /tmp/ccMC4ZM5.s:597    .text:0000000000000144 .LVL7
     /tmp/ccMC4ZM5.s:601    .text:000000000000014c .LVL8
     /tmp/ccMC4ZM5.s:663    .text:0000000000000190 .LVL15
     /tmp/ccMC4ZM5.s:668    .text:0000000000000194 .LBB272
     /tmp/ccMC4ZM5.s:777    .text:000000000000021c .LBE272
     /tmp/ccMC4ZM5.s:670    .text:0000000000000194 .LBB273
     /tmp/ccMC4ZM5.s:685    .text:00000000000001a0 .LBE273
     /tmp/ccMC4ZM5.s:689    .text:00000000000001a4 .LBB275
     /tmp/ccMC4ZM5.s:704    .text:00000000000001b0 .LBE275
     /tmp/ccMC4ZM5.s:719    .text:00000000000001c8 .LBB277
     /tmp/ccMC4ZM5.s:730    .text:00000000000001cc .LBE277
     /tmp/ccMC4ZM5.s:4996   .debug_loc:00000000000000e9 .LLST48
     /tmp/ccMC4ZM5.s:735    .text:00000000000001d0 .LBB279
GAS LISTING /tmp/ccMC4ZM5.s 			page 52


     /tmp/ccMC4ZM5.s:749    .text:00000000000001d8 .LBE279
     /tmp/ccMC4ZM5.s:5003   .debug_loc:000000000000010c .LLST49
     /tmp/ccMC4ZM5.s:710    .text:00000000000001bc .LVL16
     /tmp/ccMC4ZM5.s:765    .text:0000000000000208 .LVL21
     /tmp/ccMC4ZM5.s:773    .text:0000000000000218 .LVL22
     /tmp/ccMC4ZM5.s:5455   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccMC4ZM5.s:5603   .debug_str:000000000000031f .LASF194
     /tmp/ccMC4ZM5.s:5010   .debug_loc:000000000000012f .LLST1
     /tmp/ccMC4ZM5.s:781    .text:000000000000021c .LBB220
     /tmp/ccMC4ZM5.s:807    .text:000000000000022c .LBE220
     /tmp/ccMC4ZM5.s:5093   .debug_loc:00000000000002bb .LLST42
     /tmp/ccMC4ZM5.s:5511   .debug_str:0000000000000056 .LASF195
     /tmp/ccMC4ZM5.s:5100   .debug_loc:00000000000002de .LLST44
     /tmp/ccMC4ZM5.s:796    .text:0000000000000228 .LVL25
     /tmp/ccMC4ZM5.s:867    .text:0000000000000250 .LBB205
     /tmp/ccMC4ZM5.s:890    .text:0000000000000260 .LBE205
     /tmp/ccMC4ZM5.s:5107   .debug_loc:0000000000000301 .LLST39
     /tmp/ccMC4ZM5.s:5607   .debug_str:0000000000000330 .LASF196
     /tmp/ccMC4ZM5.s:5114   .debug_loc:0000000000000324 .LLST41
     /tmp/ccMC4ZM5.s:882    .text:000000000000025c .LVL33
     /tmp/ccMC4ZM5.s:895    .text:0000000000000264 .LBB191
     /tmp/ccMC4ZM5.s:954    .text:000000000000029c .LBE191
     /tmp/ccMC4ZM5.s:5527   .debug_str:00000000000000c7 .LASF197
     /tmp/ccMC4ZM5.s:5121   .debug_loc:0000000000000347 .LLST35
     /tmp/ccMC4ZM5.s:5128   .debug_loc:000000000000036a .LLST36
     /tmp/ccMC4ZM5.s:5135   .debug_loc:000000000000038d .LLST37
     /tmp/ccMC4ZM5.s:5142   .debug_loc:00000000000003b0 .LLST38
     /tmp/ccMC4ZM5.s:923    .text:000000000000027c .LVL38
     /tmp/ccMC4ZM5.s:956    .text:000000000000029c .LBB176
     /tmp/ccMC4ZM5.s:985    .text:00000000000002c0 .LBE176
     /tmp/ccMC4ZM5.s:5162   .debug_loc:00000000000003fe .LLST32
     /tmp/ccMC4ZM5.s:963    .text:00000000000002a8 .LBB177
     /tmp/ccMC4ZM5.s:971    .text:00000000000002b0 .LBE177
     /tmp/ccMC4ZM5.s:5170   .debug_loc:0000000000000422 .LLST33
     /tmp/ccMC4ZM5.s:5178   .debug_loc:0000000000000446 .LLST34
     /tmp/ccMC4ZM5.s:975    .text:00000000000002b8 .LVL46
     /tmp/ccMC4ZM5.s:998    .text:00000000000002d0 .LBB154
     /tmp/ccMC4ZM5.s:1052   .text:0000000000000304 .LBE154
     /tmp/ccMC4ZM5.s:5533   .debug_str:00000000000000e9 .LASF198
     /tmp/ccMC4ZM5.s:5185   .debug_loc:0000000000000469 .LLST28
     /tmp/ccMC4ZM5.s:5192   .debug_loc:000000000000048c .LLST29
     /tmp/ccMC4ZM5.s:5715   .debug_str:000000000000061e .LASF199
     /tmp/ccMC4ZM5.s:5199   .debug_loc:00000000000004af .LLST31
     /tmp/ccMC4ZM5.s:1021   .text:00000000000002e4 .LVL52
     /tmp/ccMC4ZM5.s:1054   .text:0000000000000304 .LBB144
     /tmp/ccMC4ZM5.s:1095   .text:0000000000000328 .LBE144
     /tmp/ccMC4ZM5.s:5219   .debug_loc:00000000000004fd .LLST25
     /tmp/ccMC4ZM5.s:5226   .debug_loc:0000000000000520 .LLST27
     /tmp/ccMC4ZM5.s:1084   .text:0000000000000320 .LVL60
     /tmp/ccMC4ZM5.s:1097   .text:0000000000000328 .LBB135
     /tmp/ccMC4ZM5.s:1138   .text:000000000000034c .LBE135
     /tmp/ccMC4ZM5.s:5239   .debug_loc:0000000000000558 .LLST22
     /tmp/ccMC4ZM5.s:5246   .debug_loc:000000000000057b .LLST24
     /tmp/ccMC4ZM5.s:1127   .text:0000000000000344 .LVL65
     /tmp/ccMC4ZM5.s:1140   .text:000000000000034c .LBB127
     /tmp/ccMC4ZM5.s:1179   .text:0000000000000370 .LBE127
     /tmp/ccMC4ZM5.s:5259   .debug_loc:00000000000005b3 .LLST20
GAS LISTING /tmp/ccMC4ZM5.s 			page 53


     /tmp/ccMC4ZM5.s:5270   .debug_loc:00000000000005e9 .LLST21
     /tmp/ccMC4ZM5.s:1156   .text:000000000000035c .LVL68
     /tmp/ccMC4ZM5.s:1181   .text:0000000000000370 .LBB120
     /tmp/ccMC4ZM5.s:1231   .text:0000000000000398 .LBE120
     /tmp/ccMC4ZM5.s:5289   .debug_loc:0000000000000636 .LLST15
     /tmp/ccMC4ZM5.s:5296   .debug_loc:0000000000000659 .LLST16
     /tmp/ccMC4ZM5.s:5649   .debug_str:0000000000000467 .LASF200
     /tmp/ccMC4ZM5.s:5303   .debug_loc:000000000000067c .LLST17
     /tmp/ccMC4ZM5.s:5310   .debug_loc:000000000000069f .LLST19
     /tmp/ccMC4ZM5.s:1220   .text:0000000000000390 .LVL76
     /tmp/ccMC4ZM5.s:1233   .text:0000000000000398 .LBB114
     /tmp/ccMC4ZM5.s:1274   .text:00000000000003bc .LBE114
     /tmp/ccMC4ZM5.s:5323   .debug_loc:00000000000006d7 .LLST12
     /tmp/ccMC4ZM5.s:5330   .debug_loc:00000000000006fa .LLST14
     /tmp/ccMC4ZM5.s:1263   .text:00000000000003b4 .LVL81
     /tmp/ccMC4ZM5.s:5343   .debug_loc:0000000000000732 .LLST5
     /tmp/ccMC4ZM5.s:5368   .debug_loc:0000000000000794 .LLST6
     /tmp/ccMC4ZM5.s:1343   .text:00000000000003d0 .LBB104
     /tmp/ccMC4ZM5.s:1380   .text:00000000000003f8 .LBE104
     /tmp/ccMC4ZM5.s:5379   .debug_loc:00000000000007ca .LLST8
     /tmp/ccMC4ZM5.s:1350   .text:00000000000003dc .LBB105
     /tmp/ccMC4ZM5.s:1357   .text:00000000000003e0 .LBE105
     /tmp/ccMC4ZM5.s:5386   .debug_loc:00000000000007ed .LLST9
     /tmp/ccMC4ZM5.s:1363   .text:00000000000003e4 .LBB107
     /tmp/ccMC4ZM5.s:1370   .text:00000000000003e8 .LBE107
     /tmp/ccMC4ZM5.s:5393   .debug_loc:0000000000000810 .LLST10
     /tmp/ccMC4ZM5.s:5400   .debug_loc:0000000000000833 .LLST11
     /tmp/ccMC4ZM5.s:1374   .text:00000000000003f0 .LVL91
     /tmp/ccMC4ZM5.s:1378   .text:00000000000003f8 .LVL92
     /tmp/ccMC4ZM5.s:1388   .text:00000000000003fc .LBB99
     /tmp/ccMC4ZM5.s:1400   .text:0000000000000408 .LBE99
     /tmp/ccMC4ZM5.s:5407   .debug_loc:0000000000000856 .LLST4
     /tmp/ccMC4ZM5.s:1392   .text:0000000000000404 .LVL94
     /tmp/ccMC4ZM5.s:502    .text:0000000000000100 .LBB98
     /tmp/ccMC4ZM5.s:520    .text:0000000000000110 .LBE98
     /tmp/ccMC4ZM5.s:5414   .debug_loc:0000000000000879 .LLST2
     /tmp/ccMC4ZM5.s:5421   .debug_loc:000000000000089c .LLST3
     /tmp/ccMC4ZM5.s:519    .text:0000000000000110 .LVL4
     /tmp/ccMC4ZM5.s:113    .text:000000000000006c .LBB80
     /tmp/ccMC4ZM5.s:128    .text:0000000000000078 .LBE80
     /tmp/ccMC4ZM5.s:134    .text:0000000000000080 .LBB82
     /tmp/ccMC4ZM5.s:149    .text:000000000000008c .LBE82
     /tmp/ccMC4ZM5.s:813    .text:0000000000000230 .LBB237
     /tmp/ccMC4ZM5.s:824    .text:0000000000000234 .LBE237
     /tmp/ccMC4ZM5.s:5428   .debug_loc:00000000000008bf .LLST46
     /tmp/ccMC4ZM5.s:829    .text:0000000000000238 .LBB239
     /tmp/ccMC4ZM5.s:841    .text:000000000000023c .LBE239
     /tmp/ccMC4ZM5.s:5435   .debug_loc:00000000000008e2 .LLST47
     /tmp/ccMC4ZM5.s:993    .text:00000000000002cc .LVL48
     /tmp/ccMC4ZM5.s:68     .text:0000000000000034 .LBB74
     /tmp/ccMC4ZM5.s:85     .text:0000000000000040 .LBE74
     /tmp/ccMC4ZM5.s:1422   .text:000000000000041c .LVL96
     /tmp/ccMC4ZM5.s:1427   .text:0000000000000428 .LVL97
     /tmp/ccMC4ZM5.s:1432   .text:0000000000000438 .LVL98
     /tmp/ccMC4ZM5.s:1436   .text:0000000000000440 .LVL99
     /tmp/ccMC4ZM5.s:10     .text:0000000000000000 .LFB44
     /tmp/ccMC4ZM5.s:40     .text:0000000000000020 .LFE44
GAS LISTING /tmp/ccMC4ZM5.s 			page 54


     /tmp/ccMC4ZM5.s:5615   .debug_str:0000000000000371 .LASF201
     /tmp/ccMC4ZM5.s:5893   .debug_str:0000000000000c04 .LASF202
     /tmp/ccMC4ZM5.s:5753   .debug_str:000000000000074d .LASF203
     /tmp/ccMC4ZM5.s:5685   .debug_str:000000000000056b .LASF204
     /tmp/ccMC4ZM5.s:5741   .debug_str:0000000000000701 .LASF205
     /tmp/ccMC4ZM5.s:5699   .debug_str:00000000000005c3 .LASF206
     /tmp/ccMC4ZM5.s:5765   .debug_str:00000000000007ad .LASF207
     /tmp/ccMC4ZM5.s:5505   .debug_str:000000000000002b .LASF208
     /tmp/ccMC4ZM5.s:5703   .debug_str:00000000000005e1 .LASF209
     /tmp/ccMC4ZM5.s:5507   .debug_str:000000000000003f .LASF210
     /tmp/ccMC4ZM5.s:5743   .debug_str:000000000000070f .LASF211
     /tmp/ccMC4ZM5.s:83     .text:0000000000000040 .LVL0
     /tmp/ccMC4ZM5.s:804    .text:000000000000022c .LVL26
     /tmp/ccMC4ZM5.s:858    .text:0000000000000250 .LVL31
     /tmp/ccMC4ZM5.s:905    .text:0000000000000268 .LVL35
     /tmp/ccMC4ZM5.s:952    .text:000000000000029c .LVL42
     /tmp/ccMC4ZM5.s:1014   .text:00000000000002d8 .LVL51
     /tmp/ccMC4ZM5.s:1050   .text:0000000000000304 .LVL56
     /tmp/ccMC4ZM5.s:580    .text:0000000000000134 .LVL5
     /tmp/ccMC4ZM5.s:590    .text:000000000000013c .LVL6
     /tmp/ccMC4ZM5.s:612    .text:000000000000016c .LVL9
     /tmp/ccMC4ZM5.s:619    .text:0000000000000170 .LVL10
     /tmp/ccMC4ZM5.s:628    .text:0000000000000178 .LVL11
     /tmp/ccMC4ZM5.s:637    .text:000000000000017c .LVL12
     /tmp/ccMC4ZM5.s:644    .text:0000000000000180 .LVL13
     /tmp/ccMC4ZM5.s:656    .text:0000000000000188 .LVL14
     /tmp/ccMC4ZM5.s:718    .text:00000000000001c8 .LVL17
     /tmp/ccMC4ZM5.s:727    .text:00000000000001cc .LVL18
     /tmp/ccMC4ZM5.s:734    .text:00000000000001d0 .LVL19
     /tmp/ccMC4ZM5.s:746    .text:00000000000001d8 .LVL20
     /tmp/ccMC4ZM5.s:159    .text:0000000000000094 .LVL1
     /tmp/ccMC4ZM5.s:775    .text:000000000000021c .LVL23
     /tmp/ccMC4ZM5.s:892    .text:0000000000000264 .LVL34
     /tmp/ccMC4ZM5.s:960    .text:00000000000002a4 .LVL43
     /tmp/ccMC4ZM5.s:987    .text:00000000000002c4 .LVL47
     /tmp/ccMC4ZM5.s:995    .text:00000000000002d0 .LVL49
     /tmp/ccMC4ZM5.s:1072   .text:0000000000000310 .LVL58
     /tmp/ccMC4ZM5.s:1079   .text:0000000000000318 .LVL59
     /tmp/ccMC4ZM5.s:1093   .text:0000000000000328 .LVL61
     /tmp/ccMC4ZM5.s:1115   .text:0000000000000334 .LVL63
     /tmp/ccMC4ZM5.s:1122   .text:000000000000033c .LVL64
     /tmp/ccMC4ZM5.s:1136   .text:000000000000034c .LVL66
     /tmp/ccMC4ZM5.s:1165   .text:0000000000000364 .LVL69
     /tmp/ccMC4ZM5.s:1170   .text:0000000000000368 .LVL70
     /tmp/ccMC4ZM5.s:1177   .text:0000000000000370 .LVL71
     /tmp/ccMC4ZM5.s:1208   .text:0000000000000380 .LVL74
     /tmp/ccMC4ZM5.s:1215   .text:0000000000000388 .LVL75
     /tmp/ccMC4ZM5.s:1229   .text:0000000000000398 .LVL77
     /tmp/ccMC4ZM5.s:1251   .text:00000000000003a4 .LVL79
     /tmp/ccMC4ZM5.s:1258   .text:00000000000003ac .LVL80
     /tmp/ccMC4ZM5.s:1272   .text:00000000000003bc .LVL82
     /tmp/ccMC4ZM5.s:1292   .text:00000000000003c4 .LVL84
     /tmp/ccMC4ZM5.s:1305   .text:00000000000003d0 .LVL85
     /tmp/ccMC4ZM5.s:1347   .text:00000000000003d8 .LVL86
     /tmp/ccMC4ZM5.s:1382   .text:00000000000003fc .LVL93
     /tmp/ccMC4ZM5.s:790    .text:0000000000000220 .LVL24
     /tmp/ccMC4ZM5.s:876    .text:0000000000000254 .LVL32
GAS LISTING /tmp/ccMC4ZM5.s 			page 55


     /tmp/ccMC4ZM5.s:911    .text:000000000000026c .LVL36
     /tmp/ccMC4ZM5.s:917    .text:0000000000000270 .LVL37
     /tmp/ccMC4ZM5.s:927    .text:0000000000000280 .LVL39
     /tmp/ccMC4ZM5.s:931    .text:0000000000000284 .LVL40
     /tmp/ccMC4ZM5.s:941    .text:0000000000000290 .LVL41
     /tmp/ccMC4ZM5.s:962    .text:00000000000002a8 .LVL44
     /tmp/ccMC4ZM5.s:969    .text:00000000000002b0 .LVL45
     /tmp/ccMC4ZM5.s:1008   .text:00000000000002d4 .LVL50
     /tmp/ccMC4ZM5.s:1025   .text:00000000000002e8 .LVL53
     /tmp/ccMC4ZM5.s:1029   .text:00000000000002ec .LVL54
     /tmp/ccMC4ZM5.s:1039   .text:00000000000002f8 .LVL55
     /tmp/ccMC4ZM5.s:1063   .text:0000000000000308 .LVL57
     /tmp/ccMC4ZM5.s:1106   .text:000000000000032c .LVL62
     /tmp/ccMC4ZM5.s:1148   .text:0000000000000350 .LVL67
     /tmp/ccMC4ZM5.s:1198   .text:0000000000000378 .LVL73
     /tmp/ccMC4ZM5.s:1192   .text:0000000000000374 .LVL72
     /tmp/ccMC4ZM5.s:1242   .text:000000000000039c .LVL78
     /tmp/ccMC4ZM5.s:1286   .text:00000000000003c0 .LVL83
     /tmp/ccMC4ZM5.s:1355   .text:00000000000003e0 .LVL88
     /tmp/ccMC4ZM5.s:1349   .text:00000000000003dc .LVL87
     /tmp/ccMC4ZM5.s:1361   .text:00000000000003e4 .LVL89
     /tmp/ccMC4ZM5.s:1368   .text:00000000000003e8 .LVL90
     /tmp/ccMC4ZM5.s:1402   .text:000000000000040c .LVL95
     /tmp/ccMC4ZM5.s:511    .text:0000000000000104 .LVL2
     /tmp/ccMC4ZM5.s:517    .text:0000000000000108 .LVL3
     /tmp/ccMC4ZM5.s:812    .text:0000000000000230 .LVL27
     /tmp/ccMC4ZM5.s:821    .text:0000000000000234 .LVL28
     /tmp/ccMC4ZM5.s:828    .text:0000000000000238 .LVL29
     /tmp/ccMC4ZM5.s:837    .text:000000000000023c .LVL30
     /tmp/ccMC4ZM5.s:1473   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccMC4ZM5.s:111    .text:000000000000006c .LBB79
     /tmp/ccMC4ZM5.s:165    .text:0000000000000098 .LBE79
     /tmp/ccMC4ZM5.s:173    .text:0000000000000098 .LBB243
     /tmp/ccMC4ZM5.s:180    .text:00000000000000a0 .LBE243
     /tmp/ccMC4ZM5.s:188    .text:00000000000000a0 .LBB244
     /tmp/ccMC4ZM5.s:197    .text:00000000000000a8 .LBE244
     /tmp/ccMC4ZM5.s:205    .text:00000000000000a8 .LBB245
     /tmp/ccMC4ZM5.s:216    .text:00000000000000b0 .LBE245
     /tmp/ccMC4ZM5.s:224    .text:00000000000000b0 .LBB246
     /tmp/ccMC4ZM5.s:237    .text:00000000000000b8 .LBE246
     /tmp/ccMC4ZM5.s:245    .text:00000000000000b8 .LBB247
     /tmp/ccMC4ZM5.s:260    .text:00000000000000c0 .LBE247
     /tmp/ccMC4ZM5.s:268    .text:00000000000000c0 .LBB248
     /tmp/ccMC4ZM5.s:285    .text:00000000000000c8 .LBE248
     /tmp/ccMC4ZM5.s:293    .text:00000000000000c8 .LBB249
     /tmp/ccMC4ZM5.s:312    .text:00000000000000d0 .LBE249
     /tmp/ccMC4ZM5.s:320    .text:00000000000000d0 .LBB250
     /tmp/ccMC4ZM5.s:341    .text:00000000000000d8 .LBE250
     /tmp/ccMC4ZM5.s:349    .text:00000000000000d8 .LBB251
     /tmp/ccMC4ZM5.s:372    .text:00000000000000e0 .LBE251
     /tmp/ccMC4ZM5.s:380    .text:00000000000000e0 .LBB252
     /tmp/ccMC4ZM5.s:405    .text:00000000000000e8 .LBE252
     /tmp/ccMC4ZM5.s:413    .text:00000000000000e8 .LBB253
     /tmp/ccMC4ZM5.s:440    .text:00000000000000f0 .LBE253
     /tmp/ccMC4ZM5.s:448    .text:00000000000000f0 .LBB254
     /tmp/ccMC4ZM5.s:477    .text:00000000000000f8 .LBE254
     /tmp/ccMC4ZM5.s:485    .text:00000000000000f8 .LBB255
GAS LISTING /tmp/ccMC4ZM5.s 			page 56


     /tmp/ccMC4ZM5.s:537    .text:0000000000000114 .LBE255
     /tmp/ccMC4ZM5.s:779    .text:000000000000021c .LBB256
     /tmp/ccMC4ZM5.s:842    .text:000000000000023c .LBE256
     /tmp/ccMC4ZM5.s:864    .text:0000000000000250 .LBB257
     /tmp/ccMC4ZM5.s:1319   .text:00000000000003d0 .LBE257
     /tmp/ccMC4ZM5.s:1327   .text:00000000000003d0 .LBB258
     /tmp/ccMC4ZM5.s:1417   .text:000000000000040c .LBE258
     /tmp/ccMC4ZM5.s:1276   .text:00000000000003bc .LBB101
     /tmp/ccMC4ZM5.s:1303   .text:00000000000003cc .LBE101
     /tmp/ccMC4ZM5.s:1340   .text:00000000000003d0 .LBB110
     /tmp/ccMC4ZM5.s:1386   .text:00000000000003fc .LBE110

UNDEFINED SYMBOLS
_ZN8Cconsole8putChOutEc
_ZN9sleepList5clockEv
_ZN9sleepList13cleanFinishedEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
plic_claim
CONSOLE_STATUS
CONSOLE_RX_DATA
_ZN8Cconsole7putChInEc
plic_complete
_ZN12MemAllocator9mem_allocEm
_ZN12MemAllocator8mem_freeEPv
_ZN3TCB12createThreadEPFvPvES0_Pm
_ZN9Semaphore7initSemEi
_ZN9Semaphore5closeEv
_ZN9Semaphore5mwaitEv
_ZN9Semaphore7msignalEv
_ZN9Semaphore13sem_timedwaitEm
_ZN9Semaphore11sem_trywaitEv
_ZN9sleepList3addEP3TCBm
_Z15thread_dispatchv
_ZN8Cconsole7getChInEv
_Z12mprintStringPKc
_Z12printIntegerm
